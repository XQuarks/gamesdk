set( _MY_DIR ${CMAKE_CURRENT_LIST_DIR})

# This function will create a static library target called 'gamesdk'.
# The location of the library is set according to your ANDROID_NDK_REVISION
# and ANDROID_PLATFORM, unless you explicitly set ANDROID_NDK_VERSION and/or
# ANDROID_SDK_VERSION arguments.
#
# All supported arguments are:
#  PACKAGE_DIR: where the packaged version of the library is, relative to the gamesdk root dir.
#    default value: package/localtf
#  GEN_TASK: the gradle task to build the package (if DO_LOCAL_BUILD was specified).
#    default value: localTfBuild
#  DO_LOCAL_BUILD: whether to add a custom build command to build the gamesdk (ON/OFF).
#    default value: OFF
#  ANDROID_NDK_VERSION: version number for the NDK (major.minor).
#    default value: derived from ANDROID_NDK_REVISION
#  ANDROID_SDK_VERSION: android min SDK level.
#    default value: derived from ANDROID_PLATFORM
function(add_gamesdk_target)
    set(options DO_LOCAL_BUILD)
    set(oneValueArgs GEN_TASK PACKAGE_DIR ANDROID_NDK_VERSION ANDROID_SDK_VERSION)
    cmake_parse_arguments(GAMESDK "${options}" "${oneValueArgs}" "" ${ARGN} )

    if(NOT DEFINED GAMESDK_PACKAGE_DIR)
		set(GAMESDK_PACKAGE_DIR "package/localtf")
    endif()
    if(NOT DEFINED GAMESDK_GEN_TASK)
		set(GAMESDK_GEN_TASK "localTfBuild")
    endif()
    if (NOT DEFINED GAMESDK_ANDROID_NDK_VERSION)
		string(REGEX REPLACE "^([^.]+)[.]([^.]+).*" "\\1.\\2" GAMESDK_ANDROID_NDK_VERSION ${ANDROID_NDK_REVISION} )
    endif()
    if (NOT DEFINED GAMESDK_ANDROID_SDK_VERSION)
		string(REGEX REPLACE "^android-([^.]+)" "\\1" GAMESDK_ANDROID_SDK_VERSION ${ANDROID_PLATFORM} )
    endif()
    string(REPLACE "+" "p" GAMESDK_ANDROID_STL ${ANDROID_STL}) # Game SDK build names use a sanitized STL name (c++ => cpp)

    set(GAMESDK_ROOT_DIR "${_MY_DIR}/..")
    set(GAMESDK_PACKAGE_DIR "${GAMESDK_ROOT_DIR}/../${GAMESDK_PACKAGE_DIR}")
    set(BUILD_NAME ${ANDROID_ABI}_SDK${GAMESDK_ANDROID_SDK_VERSION}_NDK${GAMESDK_ANDROID_NDK_VERSION}_${GAMESDK_ANDROID_STL})
    set(GAMESDK_LIB_DIR "${GAMESDK_PACKAGE_DIR}/libs/${BUILD_NAME}")

    include_directories( "${GAMESDK_PACKAGE_DIR}/include" ) # Games SDK Public Includes
    get_filename_component(DEP_LIB "${GAMESDK_LIB_DIR}/libgamesdk.a" REALPATH)
    get_directory_property(hasParent PARENT_DIRECTORY)
    if(hasParent)
        set(GAMESDK_LIB ${DEP_LIB} PARENT_SCOPE)
    endif()

    add_library(gamesdk STATIC IMPORTED GLOBAL)
    if(GAMESDK_DO_LOCAL_BUILD)
        # If building from a project containing local.properties, generated by Android Studio with
        # the local Android SDK and NDK paths, copy it to gamesdk to allow it to build with the local
        # toolchain.
        if (EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/../local.properties")
            file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/../local.properties
                 DESTINATION ${GAMESDK_ROOT_DIR})
        endif()

        # Build Game SDK (Gradle will use local.properties to find the Android SDK/NDK,
        # or the environment variables if no local.properties - i.e: if compiling from command line).
        add_custom_command(
            OUTPUT
                ${DEP_LIB}
            COMMAND
                ./gradlew ${GAMESDK_GEN_TASK} -PGAMESDK_ANDROID_SDK_VERSION=${GAMESDK_ANDROID_SDK_VERSION}
            VERBATIM
            WORKING_DIRECTORY
                "${GAMESDK_ROOT_DIR}"
        )
        add_custom_target(gamesdk_lib DEPENDS ${DEP_LIB})
        add_dependencies(gamesdk gamesdk_lib)
    endif()
    set_target_properties(gamesdk PROPERTIES IMPORTED_LOCATION ${DEP_LIB})

endfunction()

# Use this function in addition to add_gamesdk_target, to integrate GameSDK
# sources to your project - allowing the IDE to provide autocompletions and
# debugging.
function(add_gamesdk_sources)
    add_subdirectory("${_MY_DIR}/../src" "../../../../out")
endfunction()
