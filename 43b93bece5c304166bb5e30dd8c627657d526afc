{
  "comments": [
    {
      "key": {
        "uuid": "9aceb7e9_42e1348a",
        "filename": "bender/bender-base/app/src/main/jni/mesh.cc",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1578313
      },
      "writtenOn": "2020-01-13T17:29:45Z",
      "side": 1,
      "message": "Is there a case where the Mesh gets destroyed before all the mesh instances? If the Mesh is destroyed should it destroy all associated MeshInstances?",
      "revId": "43b93bece5c304166bb5e30dd8c627657d526afc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb94329f_6f855673",
        "filename": "bender/bender-base/app/src/main/jni/mesh.cc",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1376737
      },
      "writtenOn": "2020-01-13T17:31:35Z",
      "side": 1,
      "message": "Yes it should.",
      "parentUuid": "9aceb7e9_42e1348a",
      "revId": "43b93bece5c304166bb5e30dd8c627657d526afc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b242ceae_be337581",
        "filename": "bender/bender-base/app/src/main/jni/mesh.h",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 1376737
      },
      "writtenOn": "2020-01-13T17:39:34Z",
      "side": 1,
      "message": "Is this the BB in object space or world space?",
      "revId": "43b93bece5c304166bb5e30dd8c627657d526afc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "000fc4cd_19c0a02b",
        "filename": "bender/bender-base/app/src/main/jni/mesh_instance.cc",
        "patchSetId": 2
      },
      "lineNbr": 78,
      "author": {
        "id": 1376737
      },
      "writtenOn": "2020-01-13T17:39:34Z",
      "side": 1,
      "message": "I don\u0027t think the mesh instance should hold the descriptors and mesh_buffer (down). The reason is that in the case of instancing, for example, these resources will be hold by another entity that performs the rendering and submit the draws. MeshInstance should only draw all the information necessary (MVP and Material properties) for another entity to submit the correct draw.",
      "revId": "43b93bece5c304166bb5e30dd8c627657d526afc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "021998d8_e4c93a1c",
        "filename": "bender/bender-base/app/src/main/jni/mesh_instance.h",
        "patchSetId": 2
      },
      "lineNbr": 59,
      "author": {
        "id": 1578313
      },
      "writtenOn": "2020-01-13T17:29:45Z",
      "side": 1,
      "message": "Should this end up being a shared_ptr?",
      "revId": "43b93bece5c304166bb5e30dd8c627657d526afc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92382af8_d7e25305",
        "filename": "bender/bender-base/app/src/main/jni/vulkan_main.cc",
        "patchSetId": 2
      },
      "lineNbr": 783,
      "author": {
        "id": 1572660
      },
      "writtenOn": "2020-01-10T23:48:06Z",
      "side": 1,
      "message": "I\u0027m concerned about this; the extra param is b/c the pipeline needs to know about the material descriptor set layout. However, this isn\u0027t rigorous, I don\u0027t know if we can get some sort of singular material layout.\n\nAlso, have raised this to Fran; this line only executes on the first DrawFrame per mesh b/c it only creates a pipeline if one does not already exist. So it\u0027s not really updating if the material descriptor set layout were to change.",
      "revId": "43b93bece5c304166bb5e30dd8c627657d526afc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "502e5d6b_33672335",
        "filename": "bender/bender-base/app/src/main/jni/vulkan_main.cc",
        "patchSetId": 2
      },
      "lineNbr": 790,
      "author": {
        "id": 1578313
      },
      "writtenOn": "2020-01-13T17:29:45Z",
      "side": 1,
      "message": "Summary of quick discussion we had before:\n\nSo this right now still has us making a single draw call for every MeshInstance\nFor instanced rendering we want a single draw call for every Mesh (geometry + material)\nand instances are differentiated via their MVP matrix\nSo we can define vertex attributes to be per-vertex and per-instance I believe\nWhich may let us refactor this so that we can make this a single draw call per Mesh rather than per MeshInstance\n\nThe refactor might involve something like having Mesh own an array of MVP structs that we can use to create the instanced data and then iterate over all the Meshes and have the Mesh make the instanced draw call?",
      "revId": "43b93bece5c304166bb5e30dd8c627657d526afc",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}