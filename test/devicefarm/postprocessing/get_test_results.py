#!/usr/bin/env python2

# Take logcats generated by the swappy testapp and summarizes successes
# and failures.

from __future__ import print_function
import json
import os
import re

success_pattern = r'^.*TestApp.*TESTS (.*)'
failed_tests_pattern = r'^.*TestApp.*Failed tests'
failed_tests_done_pattern = r'^.*TestApp.*?: Failure details'

test_failed_pattern = r'^.*SwappyTestMain.*TestFailed: (.*)'
test_detail_pattern = r'^.*SwappyTestMain.*Bad test result(.*)'
name_pattern = r'^(.*)-(.*)-en-portrait.*'

# Process all logcat files
all_logcats = [fname for fname in os.listdir('.') if fname.endswith('_logcat')]

results = []

START = 0
FAILED = 1
FAILED_TESTS = 2
results = {}
for filename in all_logcats:
    new_file = filename[:-6] + 'test_result.txt'
    print('{} -> {}'.format(filename, new_file))
    m = re.match(name_pattern, filename)
    if m:
        device_name = m.group(1)
        device_api_level = m.group(2)
    test_result = "DIDN'T RUN"
    failed = {}
    last_failure = ""
    with open(filename) as f:
        state = START
        for line in f:
            if '/SwappyTestMain' in line:
                m = re.match(test_failed_pattern, line)
                if m:
                    last_failure = m.group(1)
                m = re.match(test_detail_pattern, line)
                if m:
                    failed[last_failure] = m.group(1)
            if '/TestApp' in line:
                if state==START:
                    m = re.match(success_pattern, line)
                    if m:
                        test_result = m.group(1)
                        if test_result == "SUCCEEDED":
                            break
                        else:
                            state = FAILED
                elif state==FAILED:
                    m = re.match(failed_tests_pattern, line)
                    if m:
                        state = FAILED_TESTS
                else:
                    m = re.match(failed_tests_done_pattern, line)
                    if m:
                        break
    result = {'device':device_name, 'api':device_api_level, 'result': test_result}
    if len(failed)>0:
        result['failed'] = failed
    results[result['api']] = result

    with open(new_file, 'wt') as f:
        f.write(test_result + '\n')
        for l in failed:
            f.write(l + '\n')

with open('summary.txt','wt') as summary:
    summary.write(json.dumps(results, indent = 1))
    fails = {}
    for a,r in results.iteritems():
        if 'failed' in r:
            for f in r['failed'].iterkeys():
                if f in fails:
                    fails[f] += 1
                else:
                    fails[f] = 1
    summary.write('\nFailure details:\n')
    summary.write(json.dumps(fails, indent = 1))
print("wrote summary.txt")
