{
  "comments": [
    {
      "key": {
        "uuid": "bc5b573d_c03b5cdc",
        "filename": "bender/bender-base/app/src/main/jni/geometry.cc",
        "patchSetId": 15
      },
      "lineNbr": 18,
      "author": {
        "id": 1566081
      },
      "writtenOn": "2020-03-27T20:01:24Z",
      "side": 1,
      "message": "Alternative option here is to initialize the bounding box with the data from the first vertex and iterate starting at the second. You\u0027d need an initializer for bounding_box_ which took a point though. Bit of a micro-optimization. \n\n(Don\u0027t change anything - just pointing it out).",
      "range": {
        "startLine": 18,
        "startChar": 2,
        "endLine": 18,
        "endChar": 47
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9003538e_7a515baf",
        "filename": "bender/bender-base/app/src/main/jni/geometry.cc",
        "patchSetId": 15
      },
      "lineNbr": 18,
      "author": {
        "id": 1578313
      },
      "writtenOn": "2020-03-30T16:04:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bc5b573d_c03b5cdc",
      "range": {
        "startLine": 18,
        "startChar": 2,
        "endLine": 18,
        "endChar": 47
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0ba3b0dd_e99ce0ec",
        "filename": "bender/bender-base/app/src/main/jni/geometry.cc",
        "patchSetId": 15
      },
      "lineNbr": 18,
      "author": {
        "id": 1566081
      },
      "writtenOn": "2020-04-03T08:45:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9003538e_7a515baf",
      "range": {
        "startLine": 18,
        "startChar": 2,
        "endLine": 18,
        "endChar": 47
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "649a009a_434131af",
        "filename": "bender/bender-base/app/src/main/jni/geometry.cc",
        "patchSetId": 15
      },
      "lineNbr": 19,
      "author": {
        "id": 1566081
      },
      "writtenOn": "2020-03-27T20:01:24Z",
      "side": 1,
      "message": "might be worth using const \u0026 for pos here.",
      "range": {
        "startLine": 19,
        "startChar": 4,
        "endLine": 19,
        "endChar": 39
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aeb082fa_1ee26fbd",
        "filename": "bender/bender-base/app/src/main/jni/geometry.cc",
        "patchSetId": 15
      },
      "lineNbr": 19,
      "author": {
        "id": 1578313
      },
      "writtenOn": "2020-03-30T16:04:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "649a009a_434131af",
      "range": {
        "startLine": 19,
        "startChar": 4,
        "endLine": 19,
        "endChar": 39
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79526ef4_967866df",
        "filename": "bender/bender-base/app/src/main/jni/geometry.cc",
        "patchSetId": 15
      },
      "lineNbr": 19,
      "author": {
        "id": 1566081
      },
      "writtenOn": "2020-04-03T08:45:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aeb082fa_1ee26fbd",
      "range": {
        "startLine": 19,
        "startChar": 4,
        "endLine": 19,
        "endChar": 39
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a318ead_4e3a9eb7",
        "filename": "bender/bender-base/app/src/main/jni/geometry.cc",
        "patchSetId": 15
      },
      "lineNbr": 26,
      "author": {
        "id": 1566081
      },
      "writtenOn": "2020-03-27T20:01:24Z",
      "side": 1,
      "message": "Try this...\nbounding_box_.max \u003d max(bounding_box_.max,pos);\nbounding_box_.min \u003d min(bounding_box_.min,pos);\n\nMax and min are often implemented using conditional moves, or other tricks that allow you to avoid branches - so you save a lot here. Even better, doing it on SIMD types often saves you a LOT.\n\nYou might be able to save even more by only creating bounding_box_ at the end, and hoisting this all out to another function - e.g.\n\nBoundingBox GenerateBoundingBox( const std::vector\u003cMeshVertex\u003e\u0026vertices )\n{\n  glm::vec3 boundingMax \u003d vertex_data[0];\n  glm::vec3 boundingMin \u003d boundingMin;\n\n  for ( int x \u003d 1; x \u003c vertex_data.size; ++x ){\n    const glm::vec3\u0026 pos \u003d vertex_data[x];\n    boundingMax \u003d max(boundingMax, pos);\n    boundingMin \u003d min(boundingMin, pos); \n  }\n\n  return BoundingBox( boundingMin, boundingMax ); // NOTE: uses Return-Value optimization\n}\n\nYou\u0027ll need to add a constructor to BoundingBox which takes max/min extents and generates center (Note: this ALSO allows you to have a version of BoundingBox which you initialize, avoiding potential double-initialization if you move setting boundingMax/boundingMin to an empty constructor instead of on the field).",
      "range": {
        "startLine": 21,
        "startChar": 4,
        "endLine": 26,
        "endChar": 65
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef649b10_a6d73fc8",
        "filename": "bender/bender-base/app/src/main/jni/geometry.cc",
        "patchSetId": 15
      },
      "lineNbr": 26,
      "author": {
        "id": 1578313
      },
      "writtenOn": "2020-03-30T16:04:11Z",
      "side": 1,
      "message": "This is a really good suggestion - implemented!",
      "parentUuid": "2a318ead_4e3a9eb7",
      "range": {
        "startLine": 21,
        "startChar": 4,
        "endLine": 26,
        "endChar": 65
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea412f10_4ef19a22",
        "filename": "bender/bender-base/app/src/main/jni/geometry.cc",
        "patchSetId": 15
      },
      "lineNbr": 26,
      "author": {
        "id": 1566081
      },
      "writtenOn": "2020-04-03T08:45:02Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ef649b10_a6d73fc8",
      "range": {
        "startLine": 21,
        "startChar": 4,
        "endLine": 26,
        "endChar": 65
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "21623de5_938835ed",
        "filename": "bender/bender-base/app/src/main/jni/geometry.cc",
        "patchSetId": 15
      },
      "lineNbr": 30,
      "author": {
        "id": 1566081
      },
      "writtenOn": "2020-03-27T20:01:24Z",
      "side": 1,
      "message": "Nice - pre-sizing vectors wherever possible to reduce allocs is a great (and usually free) optimization.",
      "range": {
        "startLine": 30,
        "startChar": 2,
        "endLine": 30,
        "endChar": 66
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06c75aed_5616e5f4",
        "filename": "bender/bender-base/app/src/main/jni/geometry.cc",
        "patchSetId": 15
      },
      "lineNbr": 30,
      "author": {
        "id": 1578313
      },
      "writtenOn": "2020-03-30T16:04:11Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "21623de5_938835ed",
      "range": {
        "startLine": 30,
        "startChar": 2,
        "endLine": 30,
        "endChar": 66
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bc9cf638_e567ca98",
        "filename": "bender/bender-base/app/src/main/jni/geometry.cc",
        "patchSetId": 15
      },
      "lineNbr": 30,
      "author": {
        "id": 1566081
      },
      "writtenOn": "2020-04-03T08:45:02Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "06c75aed_5616e5f4",
      "range": {
        "startLine": 30,
        "startChar": 2,
        "endLine": 30,
        "endChar": 66
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7873479a_69312221",
        "filename": "bender/bender-base/app/src/main/jni/geometry.cc",
        "patchSetId": 15
      },
      "lineNbr": 34,
      "author": {
        "id": 1566081
      },
      "writtenOn": "2020-03-27T20:01:24Z",
      "side": 1,
      "message": "Took me a minute to figure out what you were doing here - good stuff.\n\nMaybe add a comment something like this?\n// We\u0027re going to pack meshes so that each coordinate is normalized and lies within a \n// bounding box which for each axis is symmetrical about the origin.\n// We then normalize all of the vertices to be within the range -1.0f and 1.0f, and\n// store the scale favor to regenerate their original positions later. This simplifies\n// normal mapping.",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 34,
        "endChar": 40
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b267da4_845e1272",
        "filename": "bender/bender-base/app/src/main/jni/geometry.cc",
        "patchSetId": 15
      },
      "lineNbr": 34,
      "author": {
        "id": 1578313
      },
      "writtenOn": "2020-03-30T16:04:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7873479a_69312221",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 34,
        "endChar": 40
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "93765c20_bd6625e9",
        "filename": "bender/bender-base/app/src/main/jni/geometry.cc",
        "patchSetId": 15
      },
      "lineNbr": 34,
      "author": {
        "id": 1566081
      },
      "writtenOn": "2020-04-03T08:45:02Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "8b267da4_845e1272",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 34,
        "endChar": 40
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "20f3cbbf_75cfa4a8",
        "filename": "bender/bender-base/app/src/main/jni/mesh.cc",
        "patchSetId": 15
      },
      "lineNbr": 261,
      "author": {
        "id": 1566081
      },
      "writtenOn": "2020-04-03T08:45:02Z",
      "side": 1,
      "message": "1.0f?",
      "range": {
        "startLine": 261,
        "startChar": 48,
        "endLine": 261,
        "endChar": 51
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6791fc9_43a62cd6",
        "filename": "bender/bender-base/app/src/main/jni/mesh.cc",
        "patchSetId": 15
      },
      "lineNbr": 261,
      "author": {
        "id": 1578313
      },
      "writtenOn": "2020-04-03T15:56:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "20f3cbbf_75cfa4a8",
      "range": {
        "startLine": 261,
        "startChar": 48,
        "endLine": 261,
        "endChar": 51
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c19a1915_0827ecba",
        "filename": "bender/bender-base/app/src/main/jni/mesh.cc",
        "patchSetId": 15
      },
      "lineNbr": 262,
      "author": {
        "id": 1566081
      },
      "writtenOn": "2020-04-03T08:45:02Z",
      "side": 1,
      "message": "1.0f?",
      "range": {
        "startLine": 262,
        "startChar": 41,
        "endLine": 262,
        "endChar": 44
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "acdfab11_9967a1fc",
        "filename": "bender/bender-base/app/src/main/jni/mesh.cc",
        "patchSetId": 15
      },
      "lineNbr": 262,
      "author": {
        "id": 1578313
      },
      "writtenOn": "2020-04-03T15:56:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c19a1915_0827ecba",
      "range": {
        "startLine": 262,
        "startChar": 41,
        "endLine": 262,
        "endChar": 44
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30b82800_bb5c1474",
        "filename": "bender/bender-base/app/src/main/jni/vulkan_main.cc",
        "patchSetId": 15
      },
      "lineNbr": 446,
      "author": {
        "id": 1566081
      },
      "writtenOn": "2020-03-27T20:01:24Z",
      "side": 1,
      "message": "Should probably document what each element here contains, and where to find the struct that mirrors this layout in the source tree.",
      "range": {
        "startLine": 444,
        "startChar": 0,
        "endLine": 446,
        "endChar": 55
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7568e1be_7ffa2317",
        "filename": "bender/bender-base/app/src/main/jni/vulkan_main.cc",
        "patchSetId": 15
      },
      "lineNbr": 446,
      "author": {
        "id": 1578313
      },
      "writtenOn": "2020-03-30T16:04:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "30b82800_bb5c1474",
      "range": {
        "startLine": 444,
        "startChar": 0,
        "endLine": 446,
        "endChar": 55
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c76fda2e_2e78f7f9",
        "filename": "bender/bender-base/app/src/main/shaders/mesh.vert",
        "patchSetId": 15
      },
      "lineNbr": 33,
      "author": {
        "id": 1566081
      },
      "writtenOn": "2020-03-27T20:01:24Z",
      "side": 1,
      "message": "May be worth commenting the CPU-side struct + file it\u0027s defined in here:\ne.g.\n// This matches the layout of MeshVertex defined in \"x.h\"",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 33,
        "endChar": 40
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b3f8117_627bece4",
        "filename": "bender/bender-base/app/src/main/shaders/mesh.vert",
        "patchSetId": 15
      },
      "lineNbr": 33,
      "author": {
        "id": 1578313
      },
      "writtenOn": "2020-03-30T16:04:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c76fda2e_2e78f7f9",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 33,
        "endChar": 40
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b0fb3cf2_ce75185f",
        "filename": "bender/bender-base/app/src/main/shaders/mesh.vert",
        "patchSetId": 15
      },
      "lineNbr": 33,
      "author": {
        "id": 1566081
      },
      "writtenOn": "2020-04-03T08:45:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6b3f8117_627bece4",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 33,
        "endChar": 40
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "637e2af1_d46fdc41",
        "filename": "bender/bender-base/app/src/main/shaders/mesh.vert",
        "patchSetId": 15
      },
      "lineNbr": 82,
      "author": {
        "id": 1566081
      },
      "writtenOn": "2020-03-27T20:01:24Z",
      "side": 1,
      "message": "A comment at the top of this (and the xAxis and yAxis) functions would help a lot here to explain to the people who come after you what\u0027s happening :)\n\n// Regenerate normal mapping normal, tangent, and bitangent from qtangent value.",
      "range": {
        "startLine": 77,
        "startChar": 0,
        "endLine": 82,
        "endChar": 0
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7cb7e831_8e928b90",
        "filename": "bender/bender-base/app/src/main/shaders/mesh.vert",
        "patchSetId": 15
      },
      "lineNbr": 82,
      "author": {
        "id": 1578313
      },
      "writtenOn": "2020-03-30T16:04:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "637e2af1_d46fdc41",
      "range": {
        "startLine": 77,
        "startChar": 0,
        "endLine": 82,
        "endChar": 0
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2227341e_86fd3b5e",
        "filename": "bender/bender-base/utils/src/bender_helpers.h",
        "patchSetId": 15
      },
      "lineNbr": 48,
      "author": {
        "id": 1566081
      },
      "writtenOn": "2020-03-27T20:26:37Z",
      "side": 1,
      "message": "OK now I get it 😊 Could you document the rounding away from zero behavior to make that explicit what you\u0027re doing?\n\nMight be able to avoid a branch here, but with glm it\u0027s hard to tell if what you\u0027ll get is optimal for ARM.\n\nIf you did (and vectorized it), what you\u0027d do would be:\n\ninline uint64 NormVec4x32ToSnorm16x4(glm::vec4 in)\n{\n  glm::vec4 roundingadjust \u003d glm::sign(in) * 0.5f;\n  glm::vec4 saturated \u003d std::clamp( in * SNORM_MAX + roundingadjust, SNORM_MIN, SNORM_MAX);\n  return glm::packSnorm4x16( saturated );\n  );\n}\n\n(If you don\u0027t want to provide a vector version that\u0027s fine too)",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 48,
        "endChar": 66
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f957987_b18bea68",
        "filename": "bender/bender-base/utils/src/bender_helpers.h",
        "patchSetId": 15
      },
      "lineNbr": 48,
      "author": {
        "id": 1578313
      },
      "writtenOn": "2020-03-30T16:04:11Z",
      "side": 1,
      "message": "So I decided to use the glm::pack* functions actually do the float-to-snorm conversion for you in what I assume is an optimal vectorized way:\n\nhttps://glm.g-truc.net/0.9.5/api/a00178.html#ga358943934d21da947d5bcc88c2ab7832\n\nSo inside of packed_types I take the returned uint64 and then decode it into the x,y,z,w components, would it be more efficient to just store it as a uint64 and avoid the conversion all together? Would we even really need the packed_types at that point? or is packed_types more for debugging/ease of understanding?",
      "parentUuid": "2227341e_86fd3b5e",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 48,
        "endChar": 66
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0192f82_2df42842",
        "filename": "bender/bender-base/utils/src/bender_helpers.h",
        "patchSetId": 15
      },
      "lineNbr": 48,
      "author": {
        "id": 1566081
      },
      "writtenOn": "2020-04-03T08:45:02Z",
      "side": 1,
      "message": "They\u0027re more for debugging/ease of understanding. You can just eliminate them too, but they\u0027re handy if you\u0027re hacking away after you\u0027ve packed the assets and you need to access them from the CPU for any reason.\n\nThis is one of those cases where as long as you\u0027re certain that the endianness of the platform you\u0027re running on matches the endianness of the platform that cooked your data (or you\u0027ve actually handled that with code to make it match), you can do mildly unsafe things instead :D \n\nOne way would be to add a function to the packed types which cast their this pointer to a uint64_t* and filled it from a uint64_t (a version of Set... or have it as a constructor - although using this ptr from a constructor is iffy). \n\nSee packed_types.h for more 😊",
      "parentUuid": "1f957987_b18bea68",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 48,
        "endChar": 66
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a8d82bd_ec04195e",
        "filename": "bender/bender-base/utils/src/mesh_helpers.h",
        "patchSetId": 15
      },
      "lineNbr": 16,
      "author": {
        "id": 1566081
      },
      "writtenOn": "2020-03-27T20:01:24Z",
      "side": 1,
      "message": "The ARM/Android ABI determines what the compiler does with values this large in C++ when passed into functions.\n\nSo our primary target ABI right now should be arm64-v8a, and that\u0027s mostly documented here (with the exception of r18 being reserved for Android use).\n\nhttps://developer.arm.com/docs/ihi0055/d/procedure-call-standard-for-the-arm-64-bit-architecture\n\nIt looks like v0-v7 SIMD registers can be used without pushing anything on the stack. So what you have above is correct. 👍",
      "range": {
        "startLine": 15,
        "startChar": 4,
        "endLine": 16,
        "endChar": 35
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf9ce0a3_dbb43707",
        "filename": "bender/bender-base/utils/src/mesh_helpers.h",
        "patchSetId": 15
      },
      "lineNbr": 16,
      "author": {
        "id": 1578313
      },
      "writtenOn": "2020-03-30T16:04:11Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6a8d82bd_ec04195e",
      "range": {
        "startLine": 15,
        "startChar": 4,
        "endLine": 16,
        "endChar": 35
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7cd1af46_6dbe78ea",
        "filename": "bender/bender-base/utils/src/mesh_helpers.h",
        "patchSetId": 15
      },
      "lineNbr": 16,
      "author": {
        "id": 1566081
      },
      "writtenOn": "2020-04-03T08:45:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cf9ce0a3_dbb43707",
      "range": {
        "startLine": 15,
        "startChar": 4,
        "endLine": 16,
        "endChar": 35
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "325b6272_882d19fc",
        "filename": "bender/bender-base/utils/src/obj_loader.cc",
        "patchSetId": 15
      },
      "lineNbr": 30,
      "author": {
        "id": 1566081
      },
      "writtenOn": "2020-04-03T08:45:02Z",
      "side": 1,
      "message": "Using emplace_back is one of the better new features of C++ - it\u0027s a true perf optimization. About the only way of doing something like this before was with manually using placement new, which was a mess.",
      "range": {
        "startLine": 30,
        "startChar": 24,
        "endLine": 30,
        "endChar": 36
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a65b9fd_394ab21f",
        "filename": "bender/bender-base/utils/src/obj_loader.cc",
        "patchSetId": 15
      },
      "lineNbr": 30,
      "author": {
        "id": 1578313
      },
      "writtenOn": "2020-04-03T15:56:23Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "325b6272_882d19fc",
      "range": {
        "startLine": 30,
        "startChar": 24,
        "endLine": 30,
        "endChar": 36
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "178301dd_e85924ac",
        "filename": "bender/bender-base/utils/src/obj_loader.h",
        "patchSetId": 15
      },
      "lineNbr": 69,
      "author": {
        "id": 1566081
      },
      "writtenOn": "2020-04-03T08:45:02Z",
      "side": 1,
      "message": "This is a nit, but element counts in Modern C++ tend to use size_t by default. No need to change. Not sure what happens if this gets cast to a short though - might be interesting to try it and find out.",
      "range": {
        "startLine": 69,
        "startChar": 10,
        "endLine": 69,
        "endChar": 13
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1c00df5_cc213ddc",
        "filename": "bender/bender-base/utils/src/obj_loader.h",
        "patchSetId": 15
      },
      "lineNbr": 69,
      "author": {
        "id": 1578313
      },
      "writtenOn": "2020-04-03T15:56:23Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "178301dd_e85924ac",
      "range": {
        "startLine": 69,
        "startChar": 10,
        "endLine": 69,
        "endChar": 13
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fd62e87e_5c55e914",
        "filename": "bender/bender-base/utils/src/packed_types.h",
        "patchSetId": 15
      },
      "lineNbr": 8,
      "author": {
        "id": 1566081
      },
      "writtenOn": "2020-04-03T08:45:02Z",
      "side": 1,
      "message": "Careful with the placement of this. You want it to tightly bind to the structs you want to apply it to, because you can accidentally cause all structs in headers you #include afterwards to get laid out in binary-incompatible ways with their compiled libs that reference them - and this can cause nasty bugs.\n\n(Good libs will push/pack if it\u0027s important - not all libs are good).\n\nTo help, put your #pragma pack after your using namespace line (15 below).",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 8,
        "endChar": 21
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77f14f42_0901f6e2",
        "filename": "bender/bender-base/utils/src/packed_types.h",
        "patchSetId": 15
      },
      "lineNbr": 8,
      "author": {
        "id": 1578313
      },
      "writtenOn": "2020-04-03T15:56:23Z",
      "side": 1,
      "message": "Oh that\u0027s a really good point to make, slipped my mind the effect of #including files after this would have!",
      "parentUuid": "fd62e87e_5c55e914",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 8,
        "endChar": 21
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99f27853_e38aca32",
        "filename": "bender/bender-base/utils/src/packed_types.h",
        "patchSetId": 15
      },
      "lineNbr": 27,
      "author": {
        "id": 1566081
      },
      "writtenOn": "2020-03-27T20:01:24Z",
      "side": 1,
      "message": "I\u0027m still not sure about the implementation of NormFloatToSnorm16 - will follow up in email. But if we can make it easily done as vector math, we can replace these with SIMD operations. (Although with a bit of luck Clang will do this automagically).",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 27,
        "endChar": 5
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f668559d_f1fcf28c",
        "filename": "bender/bender-base/utils/src/packed_types.h",
        "patchSetId": 15
      },
      "lineNbr": 27,
      "author": {
        "id": 1566081
      },
      "writtenOn": "2020-03-27T20:26:37Z",
      "side": 1,
      "message": "OK - found the original note - understand the rounding issue there.",
      "parentUuid": "99f27853_e38aca32",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 27,
        "endChar": 5
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "206334e1_192f937a",
        "filename": "bender/bender-base/utils/src/packed_types.h",
        "patchSetId": 15
      },
      "lineNbr": 27,
      "author": {
        "id": 1578313
      },
      "writtenOn": "2020-03-30T16:04:11Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f668559d_f1fcf28c",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 27,
        "endChar": 5
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "82080e32_b7eeea60",
        "filename": "bender/bender-base/utils/src/packed_types.h",
        "patchSetId": 15
      },
      "lineNbr": 27,
      "author": {
        "id": 1566081
      },
      "writtenOn": "2020-04-03T08:45:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "206334e1_192f937a",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 27,
        "endChar": 5
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c66134f0_1f1fef76",
        "filename": "bender/bender-base/utils/src/packed_types.h",
        "patchSetId": 15
      },
      "lineNbr": 43,
      "author": {
        "id": 1566081
      },
      "writtenOn": "2020-04-03T08:45:02Z",
      "side": 1,
      "message": "Consider adding a version to all of these which did something like this:\n\nconst vec4_snorm16( uint64_t packed_in ) {\n  *reinterpret_cast\u003cuint64_t\u003e(\u0026x) \u003d in;\n}\n\nconst vec4_snorm16 \u0026Set( uint64_t packed_in ) {\n  //NOTE: When targeting a new platform, must verify that this is still valid.\n  *reinterpret_cast\u003cuint64_t\u003e(\u0026x) \u003d in;\n}\n\nMight be worth considering a constexpr version of both types as well... but if we go too far this will become a full math/vector type lib. That\u0027s ok, but we should decide if we actually want to do that. 😊",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 5
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ec16909_f971c340",
        "filename": "bender/bender-base/utils/src/packed_types.h",
        "patchSetId": 15
      },
      "lineNbr": 43,
      "author": {
        "id": 1578313
      },
      "writtenOn": "2020-04-03T15:56:23Z",
      "side": 1,
      "message": "Ohhhhhh this is how you do something like that! Ok for a little bit I tried to do a sort of type punning with Unions to be able to get something to this effect but it didn\u0027t quite work (and technically in c++ is undefined behavior...) \n\nI\u0027ll go ahead and do this though because they could be useful later!\n\nI also had to add a default constructor since we\u0027ve added a non-default constructor and it deletes the implicit default constructor as a result",
      "parentUuid": "c66134f0_1f1fef76",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 5
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "78093162_c5ec04e7",
        "filename": "bender/bender-base/utils/src/packed_types.h",
        "patchSetId": 15
      },
      "lineNbr": 100,
      "author": {
        "id": 1566081
      },
      "writtenOn": "2020-04-03T08:45:02Z",
      "side": 1,
      "message": "Don\u0027t know if it\u0027s important for packed_vertex to be packed tightly but if so #pragma pack(pop) must be before the #endif but after the struct below.",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 100,
        "endChar": 17
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63c7fead_4591d931",
        "filename": "bender/bender-base/utils/src/packed_types.h",
        "patchSetId": 15
      },
      "lineNbr": 100,
      "author": {
        "id": 1578313
      },
      "writtenOn": "2020-04-03T15:56:23Z",
      "side": 1,
      "message": "It\u0027s worked without having packed_vertex within the bounds of the #pragma pack however I think it\u0027ll be good to be explicit, since it does need to be packed tightly (I guess we just got somewhat lucky and the compiler packed it properly for us 😊)",
      "parentUuid": "78093162_c5ec04e7",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 100,
        "endChar": 17
      },
      "revId": "5ac7a70f1d16ab680c50339f8b80fb8a1b63d6a6",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}