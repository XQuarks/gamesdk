{
  "comments": [
    {
      "key": {
        "uuid": "70c7e4b7_c97254e9",
        "filename": "test/swappy/swappycommon_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1498014
      },
      "writtenOn": "2020-03-13T09:43:28Z",
      "side": 1,
      "message": "As discussed we can try to use std::optional to avoid having to define this struct. Not a huge saving, but can still make things a bit clearer for the reader.",
      "revId": "b83de25db3b4205eb1ef0adb7b7f31c1fdff55e5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "35d0c034_8d6ab0f9",
        "filename": "test/swappy/swappycommon_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 152,
      "author": {
        "id": 1388190
      },
      "writtenOn": "2020-03-13T01:19:43Z",
      "side": 1,
      "message": "std::chrono::duration_cast\u003cstd::chrono::milliseconds\u003e(d).count()",
      "range": {
        "startLine": 152,
        "startChar": 9,
        "endLine": 152,
        "endChar": 36
      },
      "revId": "b83de25db3b4205eb1ef0adb7b7f31c1fdff55e5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c122e94a_0eebdc77",
        "filename": "test/swappy/swappycommon_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 152,
      "author": {
        "id": 1373878
      },
      "writtenOn": "2020-03-13T08:57:46Z",
      "side": 1,
      "message": "Unfortunately, that doesn\u0027t give fractional ms. I\u0027ve compromised and cast to microseconds and divided by 1000.",
      "parentUuid": "35d0c034_8d6ab0f9",
      "range": {
        "startLine": 152,
        "startChar": 9,
        "endLine": 152,
        "endChar": 36
      },
      "revId": "b83de25db3b4205eb1ef0adb7b7f31c1fdff55e5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "92ee5a4c_befbc290",
        "filename": "test/swappy/swappycommon_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 191,
      "author": {
        "id": 1388190
      },
      "writtenOn": "2020-03-13T01:19:43Z",
      "side": 1,
      "message": "we can overload operator bool() [similar to std::optional]",
      "range": {
        "startLine": 191,
        "startChar": 12,
        "endLine": 191,
        "endChar": 39
      },
      "revId": "b83de25db3b4205eb1ef0adb7b7f31c1fdff55e5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3cb506c6_819d71da",
        "filename": "test/swappy/swappycommon_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 191,
      "author": {
        "id": 1373878
      },
      "writtenOn": "2020-03-13T08:57:46Z",
      "side": 1,
      "message": "This is to catch if it\u0027s undefined, not if it\u0027s true or false, though.",
      "parentUuid": "92ee5a4c_befbc290",
      "range": {
        "startLine": 191,
        "startChar": 12,
        "endLine": 191,
        "endChar": 39
      },
      "revId": "b83de25db3b4205eb1ef0adb7b7f31c1fdff55e5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61959c0b_c62b761b",
        "filename": "test/swappy/swappycommon_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 191,
      "author": {
        "id": 1388190
      },
      "writtenOn": "2020-03-13T20:03:44Z",
      "side": 1,
      "message": "Right.. if (p.autoModeEnabled) is whether it is defined vs. if (*p.autoModeEnabled) to check the value.\\\nSame as std::optional",
      "parentUuid": "3cb506c6_819d71da",
      "range": {
        "startLine": 191,
        "startChar": 12,
        "endLine": 191,
        "endChar": 39
      },
      "revId": "b83de25db3b4205eb1ef0adb7b7f31c1fdff55e5",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}