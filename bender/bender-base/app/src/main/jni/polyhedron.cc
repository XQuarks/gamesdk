//
// Created by Andy Yu on 2019-11-04.
//

#include "polyhedron.h"

namespace  {
  const std::vector<float> vertex_tetrahedron = {0.0f, 1.61803398875f, 4.236067977500615f, 3.327708479143136e-13f, -5.648090636668026f, -14.786893258337637f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                                 -1.61803398875f, -4.236067977500615f, 0.0f, 5.648090636668026f, 14.786893258337637f, 3.339550858072471e-13f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                                 4.236067977500615f, 0.0f, -1.61803398875f, -14.786893258337637f, -3.327708479143136e-13f, 5.648090636668026f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                                 -2.618033988750235f, 2.618033988750235f, -2.618033988750235f, 9.138802621669283f, -9.138802621669283f, 9.138802621669283f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f};
  const std::vector<u_int16_t> index_tetrahedron = {0, 1, 3, 0, 2, 1, 0, 3, 2, 3, 1, 2};

  const std::vector<float> vertex_cube = {1.0f, -1.0f, -1.0f, 0.3333f, -0.3333f, -0.3333f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                          1.0f, 1.0f, -1.0f, 0.3333f, 0.3333f, -0.3333f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f,
                                          -1.0f, 1.0f, -1.0f, -0.3333f, 0.3333f, -0.3333f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f,
                                          -1.0f, -1.0f, -1.0f, -0.3333f, -0.3333f, -0.3333f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                          1.0f, -1.0f, 1.0f, 0.3333f, -0.3333f, 0.3333f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f,
                                          1.0f, 1.0f, 1.0f, 0.3333f, 0.3333f, 0.3333f, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f,
                                          -1.0f, 1.0f, 1.0f, -0.3333f, 0.3333f, 0.3333f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                          -1.0f, -1.0f, 1.0f, -0.3333f, -0.3333f, 0.3333f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f};;
  const std::vector<u_int16_t> index_cube = {0, 1, 2, 0, 2, 3, 5, 1, 0, 5, 0, 4,
                                             5, 4, 7, 5, 7, 6, 7, 3, 2, 7, 2, 6,
                                             6, 2, 1, 6, 1, 5, 4, 0, 3, 4, 3, 7};

  const std::vector<float> vertex_octahedron = {-1.61803398875f, -2.618033988750235f, 4.236067977500615f, 8.472135955002843f, -13.708203932502931f, -22.180339887506765f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                                4.236067977500615f, 1.61803398875f, 2.618033988750235f, 0.0f, 0.0f, 0.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                                -2.618033988750235f, 4.236067977500615f, 1.61803398875f, 0.0f, 0.0f, 0.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                                2.618033988750235f, -4.236067977500615f, -1.61803398875f, 0.0f, 0.0f, 0.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                                -4.236067977500615f, -1.61803398875f, -2.618033988750235f, 0.0f, 0.0f, 0.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                                1.61803398875f, 2.618033988750235f, -4.236067977500615f, 8.472135955002843f, -13.708203932502931f, -22.180339887506765f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f};
  const std::vector<u_int16_t> index_octahedron = {0, 2, 1, 0, 1, 3, 0, 3, 4, 0, 4, 2,
                                                   5, 2, 4, 5, 1, 2, 5, 3, 1, 5, 4, 3};

  const std::vector<float> vertex_dodecahedron = {0.0f, 1.61803398875f, 4.236067977500615f, -0.8726779962501029f, 4.2360679775013175f, 6.854101966251988f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                                  0.0f, -1.61803398875f, 4.236067977500615f, -3.318826694946135e-13f, -2.824045318333871f, 7.393446629168513f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                                  2.618033988750235f, 2.618033988750235f, 2.618033988750235f, 4.836067977501588f, 2.741640786500861f, 6.130495168501278f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                                  -2.618033988750235f, 2.618033988750235f, 2.618033988750235f, -4.569401310834564f, 4.569401310834973f, 4.569401310834974f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                                  -2.618033988750235f, -2.618033988750235f, 2.618033988750235f, -4.569401310834974f, -4.569401310834564f, 4.569401310834974f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                                  2.618033988750235f, -2.618033988750235f, 2.618033988750235f, 5.126934831430261f, -4.664639406072794f, 3.916629695000946f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                                  4.236067977500615f, 0.0f, 1.61803398875f, 7.824922359502319f, 2.0944271910009076f, 1.6944271910006143f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                                  -4.236067977500615f, 0.0f, 1.61803398875f, -7.258610463439673f, -0.6545084971875301f, 3.177050983126219f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                                  1.61803398875f, 4.236067977500615f, 0.0f, 2.4206102728582164f, 7.5475451042879f, -0.7480097110715499f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                                  -1.61803398875f, 4.236067977500615f, 0.0f, -4.236067977500806f, 6.854101966252155f, 0.8726779962506543f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                                  -1.61803398875f, -4.236067977500615f, 0.0f, -2.4206102728582173f, -7.5475451042879f, 0.7480097110719016f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                                  1.61803398875f, -4.236067977500615f, 0.0f, 2.1180339887503448f, -7.663118960627095f, -1.3090169943755199f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                                  4.236067977500615f, 0.0f, -1.61803398875f, 6.854101966252485f, -0.8726779962505278f, -4.236067977501011f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                                  -4.236067977500615f, 0.0f, -1.61803398875f, -6.854101966252153f, 0.8726779962506539f, -4.236067977500807f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                                  2.618033988750235f, 2.618033988750235f, -2.618033988750235f, 5.545084971876786f, 4.736067977501443f, -3.4270509831257696f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                                  -2.618033988750235f, 2.618033988750235f, -2.618033988750235f, -3.4270509831257705f, 5.545084971876787f, -4.736067977501444f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                                  -2.618033988750235f, -2.618033988750235f, -2.618033988750235f, -5.545084971876786f, -4.736067977501443f, -3.4270509831257696f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                                  2.618033988750235f, -2.618033988750235f, -2.618033988750235f, 5.545084971876976f, -4.736067977501561f, -3.427050983126077f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                                  0.0f, 1.61803398875f, -4.236067977500615f, 2.042810365310288e-13f, 2.8240453183340755f, -7.393446629168845f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                                  0.0f, -1.61803398875f, -4.236067977500615f, -2.626470469684656e-13f, -3.6309154092866684f, -7.085249678930737f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f};
  const std::vector<u_int16_t> index_dodecahedron = {16, 19, 13, 19, 18, 13, 18, 15, 13, 14, 18, 12, 18, 19, 12, 19, 17,
                                                     12, 17, 19, 11, 11, 19, 10, 19, 16, 10, 9, 15, 8, 15, 18, 8, 18, 14,
                                                     8, 6, 12, 5, 12, 17, 5, 17, 11, 5, 13, 7, 16, 16, 7, 10, 10, 7, 4,
                                                     15, 9, 13, 13, 9, 7, 7, 9, 3, 14, 12, 6, 8, 14, 6, 8, 6, 2, 11, 10,
                                                     5, 5, 10, 1, 10, 4, 1, 3, 9, 0, 9, 8, 0, 8, 2, 0, 4, 7, 1, 1, 7, 0,
                                                     7, 3, 0, 6, 5, 2, 5, 1, 2, 2, 1, 0};

  const std::vector<float> vertex_icosahedron = {2.618033988750235f, 0.0f, 4.236067977500615f, 0.5257311121191337f, 0.0f, 0.8506508083520399f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                                 -2.618033988750235f, 0.0f, 4.236067977500615f, -0.5257311121191335f, 1.8829582563726915e-17f, 0.8506508083520399f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                                 0.0f, 4.236067977500615f, 2.618033988750235f, 5.648874769118075e-17f, 0.8506508083520399f, 0.5257311121191336f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                                 0.0f, -4.236067977500615f, 2.618033988750235f, 0.0f, -0.8506508083520399f, 0.5257311121191336f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                                 4.236067977500615f, 2.618033988750235f, 0.0f, 0.8506508083520399f, 0.5257311121191335f, 1.8829582563726915e-17f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                                 -4.236067977500615f, 2.618033988750235f, 0.0f, -0.8506508083520399f, 0.5257311121191336f, 3.7659165127453835e-17f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                                 -4.236067977500615f, -2.618033988750235f, 0.0f, -0.8506508083520399f, -0.5257311121191336f, 0.0f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                                 4.236067977500615f, -2.618033988750235f, 0.0f, 0.8506508083520399f, -0.5257311121191335f, 1.8829582563726915e-17f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                                 0.0f, 4.236067977500615f, -2.618033988750235f, -1.8829582563726918e-17f, 0.8506508083520399f, -0.5257311121191336f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                                 0.0f, -4.236067977500615f, -2.618033988750235f, -1.8829582563726918e-17f, -0.8506508083520399f, -0.5257311121191336f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                                 2.618033988750235f, 0.0f, -4.236067977500615f, 0.5257311121191336f, 0.0f, -0.8506508083520399f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f,
                                                 -2.618033988750235f, 0.0f, -4.236067977500615f, -0.5257311121191337f, 0.0f, -0.8506508083520399f, 1.0f, 1.0f, 1.0f, 0.0f, 0.0f};
  const std::vector<u_int16_t> index_icosahedron = {6, 9, 11, 5, 6, 11, 8, 5, 11, 10, 8, 11, 9, 10, 11, 10, 9, 7,
                                                    7, 9, 3, 9, 6, 3, 3, 6, 1, 6, 5, 1, 1, 5, 2, 5, 8, 2, 2, 8, 4,
                                                    8, 10, 4, 4, 10, 7, 2, 4, 0, 4, 7, 0, 7, 3, 0, 1, 2, 0, 3, 1, 0};
}

Mesh* createPolyhedron(android_app *app, BenderKit::Device *device, Renderer *renderer,
                                  std::shared_ptr<ShaderState> shaderState, int faces) {
  std::vector<float> vertex_data_;
  std::vector<u_int16_t> index_data_;
  if (faces == 4) {
    vertex_data_ = vertex_tetrahedron;
    index_data_ = index_tetrahedron;
  } else if (faces == 6) {
    vertex_data_ = vertex_cube;
    index_data_ = index_cube;
  } else if (faces == 8) {
    vertex_data_ = vertex_octahedron;
    index_data_ = index_octahedron;
  } else if (faces == 12) {
    vertex_data_ = vertex_dodecahedron;
    index_data_ = index_dodecahedron;
  } else if (faces == 20) {
    vertex_data_ = vertex_icosahedron;
    index_data_ = index_icosahedron;
  } else {
    return nullptr;
  }
  return new Mesh(app, device, renderer, vertex_data_, index_data_, shaderState);
}
