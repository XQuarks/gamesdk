//
// Created by Andy Yu on 2019-11-04.
//

#include "polyhedron.h"

namespace  {
  const std::vector<float> vertex_tetrahedron = { 0.000000f, 0.356822f, 0.934172f, -0.000000f, 0.356822f, 0.934172f, -0.356810f, 0.008188f, -0.934141f, -0.019496f, 0.998506f, -0.051042f, 0.250000f, 0.616140f,
                                                  -0.356822f, -0.934172f, 0.000000f, -0.356822f, -0.934172f, -0.000000f, -0.356810f, 0.008188f, -0.934141f, -0.019496f, 0.998506f, -0.051042f, 0.500000f, 0.116140f,
                                                  0.934172f, 0.000000f, -0.356822f, 0.934172f, 0.000000f, -0.356822f, 0.687085f, -0.038473f, -0.725558f, 0.484799f, 0.811370f, 0.326571f, 0.941930f, 0.500000f,
                                                  -0.577350f, 0.577350f, -0.577350f, -0.577350f, 0.577350f, -0.577350f, -0.356810f, 0.008188f, -0.934141f, -0.019496f, 0.998506f, -0.051042f, 0.625000f, 0.695913f};
  const std::vector<uint16_t> index_tetrahedron = {0, 1, 3, 0, 2, 1, 0, 3, 2, 3, 1, 2};

  const std::vector<float> vertex_cube = {1.000000f, -1.000000f, -1.000000f, 0.333300f, -0.333300f, -0.333300f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.875000f, 0.304087f,
                                          1.000000f, 1.000000f, -1.000000f, 0.333300f, 0.333300f, -0.333300f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.875000f, 0.695913f,
                                          -1.000000f, 1.000000f, -1.000000f, -0.333300f, 0.333300f, -0.333300f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.625000f, 0.695913f,
                                          -1.000000f, -1.000000f, -1.000000f, -0.333300f, -0.333300f, -0.333300f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.625000f, 0.304087f,
                                          1.000000f, -1.000000f, 1.000000f, 0.333300f, -0.333300f, 0.333300f, -0.000000f, -0.000000f, -1.000000f, -0.000000f, 1.000000f, -0.000000f, 0.125000f, 0.304087f,
                                          1.000000f, 1.000000f, 1.000000f, 0.333300f, 0.333300f, 0.333300f, 0.000000f, -0.000000f, -1.000000f, -0.000000f, 1.000000f, -0.000000f, 0.125000f, 0.695913f,
                                          -1.000000f, 1.000000f, 1.000000f, -0.333300f, 0.333300f, 0.333300f, -1.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.375000f, 0.695913f,
                                          -1.000000f, -1.000000f, 1.000000f, -0.333300f, -0.333300f, 0.333300f, -1.000000f, 0.000000f, 0.000000f, -0.000000f, 1.000000f, 0.000000f, 0.375000f, 0.304087f};

  const std::vector<uint16_t> index_cube = {0, 1, 2, 0, 2, 3, 5, 1, 0, 5, 0, 4,
                                             5, 4, 7, 5, 7, 6, 7, 3, 2, 7, 2, 6,
                                             6, 2, 1, 6, 1, 5, 4, 0, 3, 4, 3, 7};

  const std::vector<float> vertex_octahedron = {-0.309017f, -0.500000f, 0.809017f, -0.309017f, -0.500000f, 0.809017f, -0.998587f, -0.049643f, 0.018962f, 0.182903f, 0.918414f, -0.350803f, 0.308070f, 0.333333f,
                                                0.809017f, 0.309017f, 0.500000f, 0.309017f, 0.500000f, -0.809017f, -0.998587f, -0.049643f, 0.018962f, 0.182903f, 0.918414f, -0.350803f, 0.088104f, 0.600000f,
                                                -0.500000f, 0.809017f, 0.309017f, -0.500000f, 0.809017f, 0.309017f, -0.998587f, -0.049643f, 0.018962f, 0.182903f, 0.918414f, -0.350803f, 0.411896f, 0.800000f,
                                                0.500000f, -0.809017f, -0.309017f, 0.500000f, -0.809017f, -0.309017f, 0.731245f, 0.051042f, -0.680203f, 0.816470f, 0.402497f, -0.413973f, 0.911896f, 0.200000f,
                                                -0.809017f, -0.309017f, -0.500000f, -0.809017f, -0.309017f, -0.500000f, -0.051041f, 0.019496f, -0.998506f, -0.713969f, 0.272712f, -0.644885f, 0.588104f, 0.400000f,
                                                0.309017f, 0.500000f, -0.809017f, 0.309017f, 0.500000f, -0.809017f, 0.731245f, 0.051042f, -0.680203f, 0.545004f, 0.799026f, 0.254022f, 0.808070f, 0.666667f};
  const std::vector<uint16_t> index_octahedron = {0, 2, 1, 0, 1, 3, 0, 3, 4, 0, 4, 2,
                                                   5, 2, 4, 5, 1, 2, 5, 3, 1, 5, 4, 3};

  const std::vector<float> vertex_dodecahedron = {0.000000f, 0.356822f, 0.934172f, -0.107677f, 0.522675f, 0.845705f, -0.981360f, 0.101035f, -0.163478f, 0.951057f, 0.162460f, -0.262866f, 0.250000f, 0.616140f,
                                                  0.000000f, -0.356822f, 0.934172f, -0.000000f, -0.356822f, 0.934172f, -0.991021f, 0.070295f, 0.113739f, -0.380847f, 0.486111f, 0.786544f, 0.250000f, 0.383860f,
                                                  0.577350f, 0.577350f, 0.577350f, 0.584370f, 0.331288f, 0.740783f, -0.148118f, 0.239660f, 0.959492f, -0.523220f, 0.846588f, -0.097624f, 0.125000f, 0.695913f,
                                                  -0.577350f, 0.577350f, 0.577350f, -0.577350f, 0.577350f, 0.577350f, -0.148118f, -0.239660f, -0.959492f, 0.523220f, 0.846588f, -0.097624f, 0.375000f, 0.695913f,
                                                  -0.577350f, -0.577350f, 0.577350f, -0.577350f, -0.577350f, 0.577350f, -0.148118f, 0.239660f, -0.959492f, -0.523220f, 0.846588f, 0.097624f, 0.375000f, 0.304087f,
                                                  0.577350f, -0.577350f, 0.577350f, 0.643972f, -0.585905f, 0.491951f, -0.000000f, -0.000000f, -1.000000f, 0.487362f, 0.788569f, -0.375017f, 0.125000f, 0.304087f,
                                                  0.934172f, 0.000000f, 0.356822f, 0.945531f, 0.253082f, 0.204747f, -0.000000f, -0.000000f, -1.000000f, 0.487362f, 0.788569f, -0.375017f, 0.058070f, 0.500000f,
                                                  -0.934172f, 0.000000f, 0.356822f, -0.912982f, -0.082324f, 0.399607f, -0.000000f, 0.000000f, -1.000000f, -0.506125f, 0.818928f, -0.270544f, 0.441930f, 0.500000f,
                                                  0.356822f, 0.934172f, 0.000000f, 0.304042f, 0.948014f, -0.093954f, -1.000000f, -0.000000f, -0.000000f, 0.061935f, 0.524722f, 0.849018f, 0.000000f, 0.883860f,
                                                  -0.356822f, 0.934172f, 0.000000f, -0.522675f, 0.845705f, 0.107677f, -1.000000f, -0.000000f, -0.000000f, 0.061935f, 0.524722f, 0.849018f, 0.500000f, 0.883860f,
                                                  -0.356822f, -0.934172f, 0.000000f, -0.304042f, -0.948014f, 0.093954f, -1.000000f, -0.000000f, 0.000000f, 0.544894f, 0.440828f, -0.713275f, 0.500000f, 0.116140f,
                                                  0.356822f, -0.934172f, 0.000000f, 0.262866f, -0.951057f, -0.162460f, 0.981360f, -0.101035f, 0.163478f, -0.726410f, 0.361315f, -0.584620f, 0.000000f, 0.116140f,
                                                  0.934172f, 0.000000f, -0.356822f, 0.845705f, -0.107677f, -0.522675f, 0.850526f, -0.017137f, 0.525654f, -0.068348f, 0.996767f, -0.042242f, 0.941930f, 0.500000f,
                                                  -0.934172f, 0.000000f, -0.356822f, -0.845705f, 0.107677f, -0.522675f, 0.850526f, -0.017137f, -0.525654f, -0.068348f, 0.996767f, 0.042242f, 0.558070f, 0.500000f,
                                                  0.577350f, 0.577350f, -0.577350f, 0.688191f, 0.587785f, -0.425325f, 0.850526f, -0.017137f, 0.525654f, -0.068348f, 0.996767f, -0.042242f, 0.875000f, 0.695913f,
                                                  -0.577350f, 0.577350f, -0.577350f, -0.425325f, 0.688191f, -0.587785f, 0.850526f, 0.017137f, -0.525654f, 0.068348f, 0.996767f, -0.042242f, 0.625000f, 0.695913f,
                                                  -0.577350f, -0.577350f, -0.577350f, -0.688191f, -0.587785f, -0.425325f, 0.850526f, -0.017137f, -0.525654f, -0.068348f, 0.996767f, 0.042242f, 0.625000f, 0.304087f,
                                                  0.577350f, -0.577350f, -0.577350f, 0.688191f, -0.587785f, -0.425325f, 0.850526f, 0.017137f, 0.525654f, 0.068348f, 0.996767f, 0.042242f, 0.875000f, 0.304087f,
                                                  0.000000f, 0.356822f, -0.934172f, -0.000000f, 0.356822f, -0.934172f, 0.850651f, 0.000000f, -0.525731f, 0.000000f, 1.000000f, 0.000000f, 0.750000f, 0.616140f,
                                                  0.000000f, -0.356822f, -0.934172f, 0.000000f, -0.456063f, -0.889947f, 0.850526f, -0.017137f, -0.525654f, -0.068348f, 0.996767f, 0.042242f, 0.750000f, 0.383860f};
  const std::vector<uint16_t> index_dodecahedron = {16, 19, 13, 19, 18, 13, 18, 15, 13, 14, 18, 12, 18, 19, 12, 19, 17,
                                                     12, 17, 19, 11, 11, 19, 10, 19, 16, 10, 9, 15, 8, 15, 18, 8, 18, 14,
                                                     8, 6, 12, 5, 12, 17, 5, 17, 11, 5, 13, 7, 16, 16, 7, 10, 10, 7, 4,
                                                     15, 9, 13, 13, 9, 7, 7, 9, 3, 14, 12, 6, 8, 14, 6, 8, 6, 2, 11, 10,
                                                     5, 5, 10, 1, 10, 4, 1, 3, 9, 0, 9, 8, 0, 8, 2, 0, 4, 7, 1, 1, 7, 0,
                                                     7, 3, 0, 6, 5, 2, 5, 1, 2, 2, 1, 0};

  const std::vector<float> vertex_icosahedron = {0.525731f, 0.000000f, 0.850651f, 0.525731f, 0.000000f, 0.850651f, -0.670145f, -0.068883f, 0.739027f, -0.244607f, 0.796933f, -0.552327f, 0.161896f, 0.500000f,
                                                -0.525731f, 0.000000f, 0.850651f, -0.525731f, 0.000000f, 0.850651f, -0.670144f, -0.068883f, -0.739027f, -0.244606f, 0.796933f, 0.552327f, 0.338104f, 0.500000f,
                                                0.000000f, 0.850651f, 0.525731f, 0.000000f, 0.850651f, 0.525731f, -0.670145f, 0.068883f, -0.739027f, 0.244607f, 0.796933f, -0.552327f, 0.250000f, 0.823792f,
                                                0.000000f, -0.850651f, 0.525731f, 0.000000f, -0.850651f, 0.525731f, -0.000000f, -0.000000f, -1.000000f, 0.611559f, 0.233595f, -0.755929f, 0.250000f, 0.176208f,
                                                0.850651f, 0.525731f, 0.000000f, 0.850651f, 0.525731f, 0.000000f, 0.000000f, -0.000000f, -1.000000f, -0.611559f, 0.233595f, 0.755929f, 0.000000f, 0.676208f,
                                                -0.850651f, 0.525731f, 0.000000f, -0.850651f, 0.525731f, 0.000000f, 0.356822f, 0.000000f, -0.934172f, 0.000000f, 1.000000f, -0.000000f, 0.500000f, 0.676208f,
                                                -0.850651f, -0.525731f, 0.000000f, -0.850651f, -0.525731f, 0.000000f, 0.670144f, 0.068883f, -0.739027f, -0.244606f, 0.796933f, -0.552327f, 0.500000f, 0.323792f,
                                                0.850651f, -0.525731f, 0.000000f, 0.850651f, -0.525731f, 0.000000f, -0.670145f, 0.068883f, -0.739027f, 0.559449f, 0.794761f, -0.235312f, 0.000000f, 0.323792f,
                                                0.000000f, 0.850651f, -0.525731f, 0.000000f, 0.850651f, -0.525731f, 0.670145f, -0.068883f, -0.739027f, 0.244606f, 0.796933f, 0.552327f, 0.750000f, 0.823792f,
                                                0.000000f, -0.850651f, -0.525731f, 0.000000f, -0.850651f, -0.525731f, 0.670144f, 0.068883f, -0.739027f, -0.244606f, 0.796933f, -0.552327f, 0.750000f, 0.176208f,
                                                0.525731f, 0.000000f, -0.850651f, 0.525731f, 0.000000f, -0.850651f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.934172f, 0.356822f, 0.838104f, 0.500000f,
                                                -0.525731f, 0.000000f, -0.850651f, -0.525731f, 0.000000f, -0.850651f, 0.670144f, 0.068883f, -0.739027f, -0.244606f, 0.796933f, -0.552327f, 0.661896f, 0.500000f};
  const std::vector<uint16_t> index_icosahedron = {6, 9, 11, 5, 6, 11, 8, 5, 11, 10, 8, 11, 9, 10, 11, 10, 9, 7,
                                                    7, 9, 3, 9, 6, 3, 3, 6, 1, 6, 5, 1, 1, 5, 2, 5, 8, 2, 2, 8, 4,
                                                    8, 10, 4, 4, 10, 7, 2, 4, 0, 4, 7, 0, 7, 3, 0, 1, 2, 0, 3, 1, 0};
}

bool populatePolyhedron(std::vector<float>& vertex_data, std::vector<uint16_t>& index_data, int faces) {
  if (faces == 4) {
    vertex_data = vertex_tetrahedron;
    index_data = index_tetrahedron;
  } else if (faces == 6) {
    vertex_data = vertex_cube;
    index_data = index_cube;
  } else if (faces == 8) {
    vertex_data = vertex_octahedron;
    index_data = index_octahedron;
  } else if (faces == 12) {
    vertex_data = vertex_dodecahedron;
    index_data = index_dodecahedron;
  } else if (faces == 20) {
    vertex_data = vertex_icosahedron;
    index_data = index_icosahedron;
  } else {
    return false;
  }
  return true;
}

std::array<int, 5> allowedPolyFaces = {4, 6, 8, 12, 20};

std::vector<std::function<void(std::vector<float>&, std::vector<uint16_t>&)>> polyhedronGenerators = {
    populateTetrahedron,
    populateCube,
    populateOctahedron,
    populateDodecahedron,
    populateIcosahedron,
};

void populateTetrahedron(std::vector<float> &vertex_data, std::vector<uint16_t> &index_data) {
  populatePolyhedron(vertex_data, index_data, 4);
}
void populateCube(std::vector<float> &vertex_data, std::vector<uint16_t> &index_data) {
  populatePolyhedron(vertex_data, index_data, 6);
}
void populateOctahedron(std::vector<float> &vertex_data, std::vector<uint16_t> &index_data) {
  populatePolyhedron(vertex_data, index_data, 8);

}
void populateDodecahedron(std::vector<float> &vertex_data, std::vector<uint16_t> &index_data) {
  populatePolyhedron(vertex_data, index_data, 12);

}
void populateIcosahedron(std::vector<float> &vertex_data, std::vector<uint16_t> &index_data) {
  populatePolyhedron(vertex_data, index_data, 20);
}
