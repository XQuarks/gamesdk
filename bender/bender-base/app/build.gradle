apply plugin: 'com.android.application'

def buildScript = System.getenv("BENDER_SCRIPT")
if (buildScript) {
    Properties properties = new Properties()

    if (project.rootProject.file('local.properties').exists()) {
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
    }
    properties.setProperty('sdk.dir', System.getenv("ANDROID_HOME"))
    properties.setProperty('ndk.dir', System.getenv("ANDROID_NDK_HOME"))
    properties.setProperty('cmake.dir', System.getenv("BENDER_CMAKE"))

    properties.store(project.rootProject.file('local.properties').newDataOutputStream(), '')
}

if (project.hasProperty("MSBUILD_JNI_LIBS_SRC_DIR")) {
    // Visual Studio
    android {
        compileSdkVersion 28

        defaultConfig {
            applicationId "com.google.a2g.bender"
            minSdkVersion 26
            targetSdkVersion 28
            versionCode 1
            versionName "0.0.1"
            shaders {
                glslcArgs.addAll(['-c'])
            }
        }
        buildTypes {
            release {
                minifyEnabled = false
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            }
        }
        applicationVariants.all { variant ->
            variant.outputs.all {
                outputFileName = MSBUILD_ANDROID_OUTPUT_APK_NAME
            }
        }
        sourceSets {
            main {
                jniLibs.srcDirs = jniLibs.srcDirs + [MSBUILD_JNI_LIBS_SRC_DIR]
            }
        }
    }
} else {
    // Android Studio or Gradle from command line
    android {
        compileSdkVersion 28

        defaultConfig {
            applicationId "com.google.a2g.bender"
            minSdkVersion 26
            targetSdkVersion 28
            versionCode 1
            versionName "0.0.1"
            externalNativeBuild {
                cmake {
                    arguments '-DANDROID_TOOLCHAIN=clang', '-DANDROID_STL=c++_static'
                    abiFilters 'armeabi-v7a', 'arm64-v8a'
                }
            }
            shaders {
                glslcArgs.addAll(['-c'])
            }
        }

        externalNativeBuild {
            cmake {
                path 'CMakeLists.txt'
            }
        }
        buildTypes {
            release {
                minifyEnabled = false
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            }
        }
    }
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
}