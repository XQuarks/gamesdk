{
  "comments": [
    {
      "key": {
        "uuid": "0dd79704_be7ff19d",
        "filename": "src/tuningfork/core/memory_telemetry.cpp",
        "patchSetId": 5
      },
      "lineNbr": 43,
      "author": {
        "id": 1498014
      },
      "writtenOn": "2020-06-19T09:53:13Z",
      "side": 1,
      "message": "nit: could this be a static function \"makeMemoryHistogram\"? just a bit worried of macros in general. :) Return value optimization should avoid the extra copy returned by the function.",
      "revId": "7f16e2cdab642bd8fa4a4549dfeb851c295a57be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37bb29fd_f170240e",
        "filename": "src/tuningfork/core/memory_telemetry.cpp",
        "patchSetId": 5
      },
      "lineNbr": 43,
      "author": {
        "id": 1400311
      },
      "writtenOn": "2020-06-19T10:56:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0dd79704_be7ff19d",
      "revId": "7f16e2cdab642bd8fa4a4549dfeb851c295a57be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4c3670cf_fa6b4491",
        "filename": "src/tuningfork/core/memory_telemetry.cpp",
        "patchSetId": 5
      },
      "lineNbr": 125,
      "author": {
        "id": 1498014
      },
      "writtenOn": "2020-06-19T09:53:13Z",
      "side": 1,
      "message": "nit: const reference for the string?",
      "revId": "7f16e2cdab642bd8fa4a4549dfeb851c295a57be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7255885_6cdbd79c",
        "filename": "src/tuningfork/core/memory_telemetry.cpp",
        "patchSetId": 5
      },
      "lineNbr": 125,
      "author": {
        "id": 1400311
      },
      "writtenOn": "2020-06-19T10:56:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4c3670cf_fa6b4491",
      "revId": "7f16e2cdab642bd8fa4a4549dfeb851c295a57be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c9484ca1_fe3c0af9",
        "filename": "src/tuningfork/core/memory_telemetry.cpp",
        "patchSetId": 5
      },
      "lineNbr": 137,
      "author": {
        "id": 1498014
      },
      "writtenOn": "2020-06-19T09:53:13Z",
      "side": 1,
      "message": "Is this android specific? üòÆ",
      "revId": "7f16e2cdab642bd8fa4a4549dfeb851c295a57be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "223b07dd_7fc18a92",
        "filename": "src/tuningfork/core/memory_telemetry.cpp",
        "patchSetId": 5
      },
      "lineNbr": 137,
      "author": {
        "id": 1400311
      },
      "writtenOn": "2020-06-19T10:56:16Z",
      "side": 1,
      "message": "I\u0027m not aware of any Linux exceptions to this (but then, I haven\u0027t looked much). What do you have in mind?",
      "parentUuid": "c9484ca1_fe3c0af9",
      "revId": "7f16e2cdab642bd8fa4a4549dfeb851c295a57be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11acc6d0_b78c869b",
        "filename": "src/tuningfork/core/memory_telemetry.cpp",
        "patchSetId": 5
      },
      "lineNbr": 137,
      "author": {
        "id": 1498014
      },
      "writtenOn": "2020-06-22T09:06:27Z",
      "side": 1,
      "message": "My bad I misread your comment, the removal of the colon looks fine! üëç",
      "parentUuid": "223b07dd_7fc18a92",
      "revId": "7f16e2cdab642bd8fa4a4549dfeb851c295a57be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ccd9122_e10d8b8e",
        "filename": "src/tuningfork/core/memory_telemetry.cpp",
        "patchSetId": 5
      },
      "lineNbr": 147,
      "author": {
        "id": 1498014
      },
      "writtenOn": "2020-06-19T09:53:13Z",
      "side": 1,
      "message": "ubernit: this is returning some value to be stored in Mem Info from the data. Can we name this getMemInfoValueFromData?",
      "range": {
        "startLine": 147,
        "startChar": 33,
        "endLine": 147,
        "endChar": 48
      },
      "revId": "7f16e2cdab642bd8fa4a4549dfeb851c295a57be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f883e2bf_dccbc729",
        "filename": "src/tuningfork/core/memory_telemetry.cpp",
        "patchSetId": 5
      },
      "lineNbr": 147,
      "author": {
        "id": 1400311
      },
      "writtenOn": "2020-06-19T10:56:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4ccd9122_e10d8b8e",
      "range": {
        "startLine": 147,
        "startChar": 33,
        "endLine": 147,
        "endChar": 48
      },
      "revId": "7f16e2cdab642bd8fa4a4549dfeb851c295a57be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74331328_5cfbabbd",
        "filename": "src/tuningfork/core/memory_telemetry.cpp",
        "patchSetId": 5
      },
      "lineNbr": 148,
      "author": {
        "id": 1498014
      },
      "writtenOn": "2020-06-19T09:53:13Z",
      "side": 1,
      "message": "Can you pass both arguments by const reference? Would avoid a copy of the data (and key) each time this function is called.",
      "range": {
        "startLine": 147,
        "startChar": 49,
        "endLine": 148,
        "endChar": 64
      },
      "revId": "7f16e2cdab642bd8fa4a4549dfeb851c295a57be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8510310_5d6fae22",
        "filename": "src/tuningfork/core/memory_telemetry.cpp",
        "patchSetId": 5
      },
      "lineNbr": 148,
      "author": {
        "id": 1400311
      },
      "writtenOn": "2020-06-19T10:56:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "74331328_5cfbabbd",
      "range": {
        "startLine": 147,
        "startChar": 49,
        "endLine": 148,
        "endChar": 64
      },
      "revId": "7f16e2cdab642bd8fa4a4549dfeb851c295a57be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "416a19b4_63ee4b1e",
        "filename": "src/tuningfork/core/memory_telemetry.h",
        "patchSetId": 5
      },
      "lineNbr": 35,
      "author": {
        "id": 1373878
      },
      "writtenOn": "2020-06-29T14:38:04Z",
      "side": 1,
      "message": "We need a different MemoryRecordType for each histogram, don\u0027t we? The server needs to differentiate between them.\nNote that before this can be committed, the server-side proto needs updating too:\nhttps://source.corp.google.com/piper///depot/google3/google/android/performanceparameters/v1/performanceparameters.proto",
      "revId": "7f16e2cdab642bd8fa4a4549dfeb851c295a57be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73a9949c_4dfd6466",
        "filename": "src/tuningfork/core/memory_telemetry.h",
        "patchSetId": 5
      },
      "lineNbr": 35,
      "author": {
        "id": 1400311
      },
      "writtenOn": "2020-06-29T15:13:21Z",
      "side": 1,
      "message": "It could be. I went by the comment \"how the memory records were obtained\" and figured that if they came from the same source, they should share the record type. Will fix this.\n\nAbout server-side, the Play team confirmed to me that extraneous proto fields will be ignored by the backend, so I suppose we can commit in any order. But surely it\u0027s a good idea to do the other CL ASAP.",
      "parentUuid": "416a19b4_63ee4b1e",
      "revId": "7f16e2cdab642bd8fa4a4549dfeb851c295a57be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "161649d7_dc396f81",
        "filename": "src/tuningfork/core/memory_telemetry.h",
        "patchSetId": 5
      },
      "lineNbr": 35,
      "author": {
        "id": 1400311
      },
      "writtenOn": "2020-06-29T17:21:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "73a9949c_4dfd6466",
      "revId": "7f16e2cdab642bd8fa4a4549dfeb851c295a57be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a57aa78_acde1a12",
        "filename": "src/tuningfork/core/memory_telemetry.h",
        "patchSetId": 5
      },
      "lineNbr": 35,
      "author": {
        "id": 1373878
      },
      "writtenOn": "2020-06-30T09:04:30Z",
      "side": 1,
      "message": "Did they say that enum values greater than the expected maximum are ok, as well as new fields?",
      "parentUuid": "161649d7_dc396f81",
      "revId": "7f16e2cdab642bd8fa4a4549dfeb851c295a57be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7b9211b_8f94ff8d",
        "filename": "src/tuningfork/core/memory_telemetry.h",
        "patchSetId": 5
      },
      "lineNbr": 128,
      "author": {
        "id": 1498014
      },
      "writtenOn": "2020-06-19T09:53:13Z",
      "side": 1,
      "message": "ubernit: all the rest of the code is using \"MemInfo\" instead of \"Meminfo\". Can we capitalize the I for these methods as well? :)",
      "revId": "7f16e2cdab642bd8fa4a4549dfeb851c295a57be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42c21c34_df074f3f",
        "filename": "src/tuningfork/core/memory_telemetry.h",
        "patchSetId": 5
      },
      "lineNbr": 128,
      "author": {
        "id": 1400311
      },
      "writtenOn": "2020-06-19T10:56:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e7b9211b_8f94ff8d",
      "revId": "7f16e2cdab642bd8fa4a4549dfeb851c295a57be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "082d5d77_96b85632",
        "filename": "test/tuningfork/tuningfork_test.cpp",
        "patchSetId": 5
      },
      "lineNbr": 588,
      "author": {
        "id": 1373878
      },
      "writtenOn": "2020-06-29T14:38:04Z",
      "side": 1,
      "message": "I don\u0027t think this is necessary. Why the duplicate session_context?",
      "revId": "7f16e2cdab642bd8fa4a4549dfeb851c295a57be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a602fc8f_9b927c3e",
        "filename": "test/tuningfork/tuningfork_test.cpp",
        "patchSetId": 5
      },
      "lineNbr": 588,
      "author": {
        "id": 1400311
      },
      "writtenOn": "2020-06-29T15:13:21Z",
      "side": 1,
      "message": "To test the longer acquisition interval, the test length had to change for this one test, and therefore the end time had to change. We could not duplicate this and make all tests last for the longer duration, but then we have to change the expected results for all other tests (because there will be more data points). Happy to do it either way.",
      "parentUuid": "082d5d77_96b85632",
      "revId": "7f16e2cdab642bd8fa4a4549dfeb851c295a57be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e7102c9_ae19c29c",
        "filename": "test/tuningfork/tuningfork_test.cpp",
        "patchSetId": 5
      },
      "lineNbr": 588,
      "author": {
        "id": 1400311
      },
      "writtenOn": "2020-06-29T15:15:30Z",
      "side": 1,
      "message": "Sorry, I meant \"We could duplicate\"",
      "parentUuid": "a602fc8f_9b927c3e",
      "revId": "7f16e2cdab642bd8fa4a4549dfeb851c295a57be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd61b929_40f18594",
        "filename": "test/tuningfork/tuningfork_test.cpp",
        "patchSetId": 5
      },
      "lineNbr": 588,
      "author": {
        "id": 1400311
      },
      "writtenOn": "2020-06-29T16:06:33Z",
      "side": 1,
      "message": "\u003e Sorry, I meant \"We could duplicate\"\n\nOops never mind the correction - if we change all tests we really don\u0027t have to duplicate",
      "parentUuid": "3e7102c9_ae19c29c",
      "revId": "7f16e2cdab642bd8fa4a4549dfeb851c295a57be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b42f5d5_1c091e38",
        "filename": "test/tuningfork/tuningfork_test.cpp",
        "patchSetId": 5
      },
      "lineNbr": 588,
      "author": {
        "id": 1373878
      },
      "writtenOn": "2020-06-30T09:04:30Z",
      "side": 1,
      "message": "Ah, I see. Leave it as it is then.",
      "parentUuid": "cd61b929_40f18594",
      "revId": "7f16e2cdab642bd8fa4a4549dfeb851c295a57be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}