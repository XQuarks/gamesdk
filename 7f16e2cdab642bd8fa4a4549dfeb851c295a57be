{
  "comments": [
    {
      "key": {
        "uuid": "0dd79704_be7ff19d",
        "filename": "src/tuningfork/core/memory_telemetry.cpp",
        "patchSetId": 5
      },
      "lineNbr": 43,
      "author": {
        "id": 1498014
      },
      "writtenOn": "2020-06-19T09:53:13Z",
      "side": 1,
      "message": "nit: could this be a static function \"makeMemoryHistogram\"? just a bit worried of macros in general. :) Return value optimization should avoid the extra copy returned by the function.",
      "revId": "7f16e2cdab642bd8fa4a4549dfeb851c295a57be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37bb29fd_f170240e",
        "filename": "src/tuningfork/core/memory_telemetry.cpp",
        "patchSetId": 5
      },
      "lineNbr": 43,
      "author": {
        "id": 1400311
      },
      "writtenOn": "2020-06-19T10:56:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0dd79704_be7ff19d",
      "revId": "7f16e2cdab642bd8fa4a4549dfeb851c295a57be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4c3670cf_fa6b4491",
        "filename": "src/tuningfork/core/memory_telemetry.cpp",
        "patchSetId": 5
      },
      "lineNbr": 125,
      "author": {
        "id": 1498014
      },
      "writtenOn": "2020-06-19T09:53:13Z",
      "side": 1,
      "message": "nit: const reference for the string?",
      "revId": "7f16e2cdab642bd8fa4a4549dfeb851c295a57be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7255885_6cdbd79c",
        "filename": "src/tuningfork/core/memory_telemetry.cpp",
        "patchSetId": 5
      },
      "lineNbr": 125,
      "author": {
        "id": 1400311
      },
      "writtenOn": "2020-06-19T10:56:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4c3670cf_fa6b4491",
      "revId": "7f16e2cdab642bd8fa4a4549dfeb851c295a57be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c9484ca1_fe3c0af9",
        "filename": "src/tuningfork/core/memory_telemetry.cpp",
        "patchSetId": 5
      },
      "lineNbr": 137,
      "author": {
        "id": 1498014
      },
      "writtenOn": "2020-06-19T09:53:13Z",
      "side": 1,
      "message": "Is this android specific? üòÆ",
      "revId": "7f16e2cdab642bd8fa4a4549dfeb851c295a57be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "223b07dd_7fc18a92",
        "filename": "src/tuningfork/core/memory_telemetry.cpp",
        "patchSetId": 5
      },
      "lineNbr": 137,
      "author": {
        "id": 1400311
      },
      "writtenOn": "2020-06-19T10:56:16Z",
      "side": 1,
      "message": "I\u0027m not aware of any Linux exceptions to this (but then, I haven\u0027t looked much). What do you have in mind?",
      "parentUuid": "c9484ca1_fe3c0af9",
      "revId": "7f16e2cdab642bd8fa4a4549dfeb851c295a57be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11acc6d0_b78c869b",
        "filename": "src/tuningfork/core/memory_telemetry.cpp",
        "patchSetId": 5
      },
      "lineNbr": 137,
      "author": {
        "id": 1498014
      },
      "writtenOn": "2020-06-22T09:06:27Z",
      "side": 1,
      "message": "My bad I misread your comment, the removal of the colon looks fine! üëç",
      "parentUuid": "223b07dd_7fc18a92",
      "revId": "7f16e2cdab642bd8fa4a4549dfeb851c295a57be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ccd9122_e10d8b8e",
        "filename": "src/tuningfork/core/memory_telemetry.cpp",
        "patchSetId": 5
      },
      "lineNbr": 147,
      "author": {
        "id": 1498014
      },
      "writtenOn": "2020-06-19T09:53:13Z",
      "side": 1,
      "message": "ubernit: this is returning some value to be stored in Mem Info from the data. Can we name this getMemInfoValueFromData?",
      "range": {
        "startLine": 147,
        "startChar": 33,
        "endLine": 147,
        "endChar": 48
      },
      "revId": "7f16e2cdab642bd8fa4a4549dfeb851c295a57be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f883e2bf_dccbc729",
        "filename": "src/tuningfork/core/memory_telemetry.cpp",
        "patchSetId": 5
      },
      "lineNbr": 147,
      "author": {
        "id": 1400311
      },
      "writtenOn": "2020-06-19T10:56:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4ccd9122_e10d8b8e",
      "range": {
        "startLine": 147,
        "startChar": 33,
        "endLine": 147,
        "endChar": 48
      },
      "revId": "7f16e2cdab642bd8fa4a4549dfeb851c295a57be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74331328_5cfbabbd",
        "filename": "src/tuningfork/core/memory_telemetry.cpp",
        "patchSetId": 5
      },
      "lineNbr": 148,
      "author": {
        "id": 1498014
      },
      "writtenOn": "2020-06-19T09:53:13Z",
      "side": 1,
      "message": "Can you pass both arguments by const reference? Would avoid a copy of the data (and key) each time this function is called.",
      "range": {
        "startLine": 147,
        "startChar": 49,
        "endLine": 148,
        "endChar": 64
      },
      "revId": "7f16e2cdab642bd8fa4a4549dfeb851c295a57be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8510310_5d6fae22",
        "filename": "src/tuningfork/core/memory_telemetry.cpp",
        "patchSetId": 5
      },
      "lineNbr": 148,
      "author": {
        "id": 1400311
      },
      "writtenOn": "2020-06-19T10:56:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "74331328_5cfbabbd",
      "range": {
        "startLine": 147,
        "startChar": 49,
        "endLine": 148,
        "endChar": 64
      },
      "revId": "7f16e2cdab642bd8fa4a4549dfeb851c295a57be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7b9211b_8f94ff8d",
        "filename": "src/tuningfork/core/memory_telemetry.h",
        "patchSetId": 5
      },
      "lineNbr": 128,
      "author": {
        "id": 1498014
      },
      "writtenOn": "2020-06-19T09:53:13Z",
      "side": 1,
      "message": "ubernit: all the rest of the code is using \"MemInfo\" instead of \"Meminfo\". Can we capitalize the I for these methods as well? :)",
      "revId": "7f16e2cdab642bd8fa4a4549dfeb851c295a57be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42c21c34_df074f3f",
        "filename": "src/tuningfork/core/memory_telemetry.h",
        "patchSetId": 5
      },
      "lineNbr": 128,
      "author": {
        "id": 1400311
      },
      "writtenOn": "2020-06-19T10:56:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e7b9211b_8f94ff8d",
      "revId": "7f16e2cdab642bd8fa4a4549dfeb851c295a57be",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}