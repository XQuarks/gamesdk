import org.gradle.internal.os.OperatingSystem;
import static groovy.lang.Closure.IDENTITY;

def gameSdkRoot = buildscript.sourceFile.getParent()

def protobufInstallDir() {
    def protoDirName = 'linux-x86'
    if (OperatingSystem.current().isWindows()) {
        protoDirName = 'win'
    } else if (OperatingSystem.current().isMacOsX()) {
        protoDirName = 'mac'
    }
    return new File("${gameSdkRoot}/third_party/protobuf-3.0.0/install/"
            + protoDirName).getPath()
}

def getEnvironment() {
    def env = [:]
    def trans = IDENTITY
    if (OperatingSystem.current().isWindows()) {
        trans = { it.toUpperCase() }
    }
    System.getenv().each { entry -> env[trans(entry.key)] = entry.value }
    return env
}

task prepare_proto_before() {
    def protocBinDir = protobufInstallDir() + "/bin"
    def sixDir = "${gameSdkRoot}/../external/six"
    def env = getEnvironment()
    env['PATH'] = protocBinDir + System.getProperty("path.separator") + env['PATH']
    env['PYTHONPATH'] = sixDir + System.getProperty("path.separator") + env['PYTHONPATH']
    doLast {
        // Install python-protobuf
        exec {
            workingDir "${gameSdkRoot}/third_party/protobuf-3.0.0/python"
            setEnvironment env
            commandLine "python", "setup.py", "install", "--user"
        }
        // Generate nano-pb requirements
        exec {
            workingDir "${gameSdkRoot}/../external/nanopb-c/generator/proto"
            setEnvironment env
            commandLine 'make'
        }
    }
}

task prepare_proto(dependsOn: prepare_proto_before) {
    doLast {
        exec {
            workingDir "${gameSdkRoot}"
            commandLine "python"
            args = ["ab_info.py"]
        }
    }
}


