{
  "comments": [
    {
      "key": {
        "uuid": "59094b5d_de91d728",
        "filename": "cert/test/AndroidCertTest/app/src/main/cpp/ancer/System.Gpu.cpp",
        "patchSetId": 5
      },
      "lineNbr": 96,
      "author": {
        "id": 1557643
      },
      "writtenOn": "2020-05-27T17:24:36Z",
      "side": 1,
      "message": "üëç(S/R)",
      "range": {
        "startLine": 58,
        "startChar": 0,
        "endLine": 96,
        "endChar": 3
      },
      "revId": "8f9516e59bfbb4093d9b9f2292a062e8b9fcac70",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "153da3ac_a3132879",
        "filename": "cert/test/AndroidCertTest/app/src/main/cpp/ancer/util/Texture.hpp",
        "patchSetId": 5
      },
      "lineNbr": 37,
      "author": {
        "id": 1557643
      },
      "writtenOn": "2020-05-27T17:24:36Z",
      "side": 1,
      "message": "Is there a reason to not just standardize on upper or lower case? It seems weird to have it be an option. If the reason is that some other component expects uppercase or some specific formatting, I feel like there should be a specific API to get that specifically formatted string.",
      "range": {
        "startLine": 37,
        "startChar": 44,
        "endLine": 37,
        "endChar": 71
      },
      "revId": "8f9516e59bfbb4093d9b9f2292a062e8b9fcac70",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c6678ea_7c6b94ac",
        "filename": "cert/test/AndroidCertTest/app/src/main/cpp/ancer/util/Texture.hpp",
        "patchSetId": 5
      },
      "lineNbr": 37,
      "author": {
        "id": 1590267
      },
      "writtenOn": "2020-05-27T18:32:15Z",
      "side": 1,
      "message": "Good point, Shamyl. Was not an API compatibility issue, actually. I\u0027ll revise this in the fourth CL PROMISED!!",
      "parentUuid": "153da3ac_a3132879",
      "range": {
        "startLine": 37,
        "startChar": 44,
        "endLine": 37,
        "endChar": 71
      },
      "revId": "8f9516e59bfbb4093d9b9f2292a062e8b9fcac70",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "78795257_682d61e6",
        "filename": "cert/test/AndroidCertTest/app/src/main/cpp/ancer/util/texture/Png.cpp",
        "patchSetId": 5
      },
      "lineNbr": 65,
      "author": {
        "id": 1557643
      },
      "writtenOn": "2020-05-27T17:24:36Z",
      "side": 1,
      "message": "Seems like a good use of a unique_ptr...",
      "range": {
        "startLine": 64,
        "startChar": 46,
        "endLine": 65,
        "endChar": 28
      },
      "revId": "8f9516e59bfbb4093d9b9f2292a062e8b9fcac70",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e020acfe_e4894479",
        "filename": "cert/test/AndroidCertTest/app/src/main/cpp/ancer/util/texture/Png.cpp",
        "patchSetId": 5
      },
      "lineNbr": 65,
      "author": {
        "id": 1590267
      },
      "writtenOn": "2020-05-27T18:32:15Z",
      "side": 1,
      "message": "Agree. Let\u0027s do the following: I\u0027m working on the part IV (includes Gzip and other goodies). I want to change it here but should change it in other places as well to keep consistency across formats.\nI\u0027ll flip this into std::unique_ptr in the part IV wave.",
      "parentUuid": "78795257_682d61e6",
      "range": {
        "startLine": 64,
        "startChar": 46,
        "endLine": 65,
        "endChar": 28
      },
      "revId": "8f9516e59bfbb4093d9b9f2292a062e8b9fcac70",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "617f77d6_ffcdf53c",
        "filename": "cert/test/reporting/lib/graphers/texture_formats_suite_handler.py",
        "patchSetId": 5
      },
      "lineNbr": 62,
      "author": {
        "id": 1599245
      },
      "writtenOn": "2020-05-27T19:08:56Z",
      "side": 1,
      "message": "I\u0027m curious, why is there a power of 20 here, rather than a number that\u0027s a power of two? It seems like a \"magic number\" sort of choice, though perhaps I\u0027m missing some crucial relation. (Also, not tremendously important, but this could be 2**-20, since a negative power has the effect of making the inverse, just as 10**-3 makes 0.001.)",
      "revId": "8f9516e59bfbb4093d9b9f2292a062e8b9fcac70",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "db220b89_e6360d32",
        "filename": "cert/test/reporting/lib/graphers/texture_formats_suite_handler.py",
        "patchSetId": 5
      },
      "lineNbr": 62,
      "author": {
        "id": 1590267
      },
      "writtenOn": "2020-05-27T19:36:10Z",
      "side": 1,
      "message": "Hi Michael!\nLet me clarify a concept first: 2**20, or 2^20 or \"2 to the 20\" is a power of 2. Not a power of 20. Check here if I don\u0027t convince you üòä https://en.wikipedia.org/wiki/Power_of_two\n\nNow, with total validity, the question is \"why 20\". I\u0027ll comment that line in the next CL to avoid vagueness. It\u0027s the exponent that converts bytes into megabytes. Will do the development in slow motion:\n\n1 megabyte \u003d 1024 kilobytes (2^10)\n1 kilobyte \u003d 1024 bytes (2^10)\n1 megabyte \u003d 1024 * 1024 bytes\n1 megabyte \u003d 2^10 * 2^10 bytes\n1 megabyte \u003d 2^(10+10) bytes\n1 megabyte \u003d 2^20 bytes\n\nOr which is the same:\n1 byte \u003d 1/2^20 megabytes // my code stopped at this step...\n\n... But I\u0027ll keep going below. Check this out, Michael!! üòÆ\n1 byte \u003d 2^0/2^20 megabytes  // Provided that 1 \u003d 2^0\n1 byte \u003d 2^(0-20) megabytes\n1 byte \u003d 2^-20 megabytes!!\n\nIn my next CL I\u0027ll better cover this to avoid 20 to show up as a magic number, but I\u0027ll go further and rather than `1.0/2**20` I\u0027ll just go with 2**(-20) ü§ì\n\nNevertheless, I\u0027ll create a constant k_bytes_to_megabytes \u003d 2**(-20) with the explanation of how I got to it so in this line that you commented, you\u0027ll see the constant and not its value",
      "parentUuid": "617f77d6_ffcdf53c",
      "revId": "8f9516e59bfbb4093d9b9f2292a062e8b9fcac70",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}