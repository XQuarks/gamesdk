{
  "comments": [
    {
      "key": {
        "uuid": "39cd0aa2_fa60ff88",
        "filename": "cert/test/AndroidCertTest/app/src/main/cpp/ancer/vulkan/shader_module.cc",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1590267
      },
      "writtenOn": "2020-02-12T22:55:17Z",
      "side": 1,
      "message": "(self-resolved) We should take, as a convention, that log tags won\u0027t look like C++ namespaced names. This one, for example, should be just ShaderModule or, if we like, AncerShaderModule.\n\nThe deal is that it\u0027s possible to output the logcat to the terminal by just restricting to a tag, error-level.\n\nNamely,\n\n$ adb logcat -s ShaderModule:W\n\ndumps in the workstation terminal all ShaderModule traces whose error level is warning or higher (i.e., warnings or errors, in this case).\n\nIf the tag is ancer::vulkan::ShaderModule, there\u0027s no way to enter the adb-logcat command in the terminal and make it work. I already found that trying to filter traces for other ancer modules. I tried surrounding between apostrophes and other combinations. Just didn\u0027t like it.\n\nWe should take the convention to abolish this tagging bad habit because filtered adb-logcat is a very powerful weapon when investigating issues.",
      "revId": "aae268ae869170d2f3c777af5cfaaf3f1c645870",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3d92296d_0407c340",
        "filename": "cert/test/AndroidCertTest/app/src/main/cpp/operations/vulkan/VulkanVaryingsTestOperation.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2,
      "author": {
        "id": 1599245
      },
      "writtenOn": "2020-02-13T22:40:38Z",
      "side": 1,
      "message": "For newer code we can use 2020.",
      "revId": "aae268ae869170d2f3c777af5cfaaf3f1c645870",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32c1f378_2ed91f09",
        "filename": "cert/test/AndroidCertTest/app/src/main/cpp/operations/vulkan/VulkanVaryingsTestOperation.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2,
      "author": {
        "id": 1599245
      },
      "writtenOn": "2020-02-14T19:38:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3d92296d_0407c340",
      "revId": "aae268ae869170d2f3c777af5cfaaf3f1c645870",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ee86083_d5b4d4e7",
        "filename": "cert/test/AndroidCertTest/app/src/main/cpp/operations/vulkan/VulkanVaryingsTestOperation.cpp",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1599245
      },
      "writtenOn": "2020-02-13T22:40:38Z",
      "side": 1,
      "message": "You might consider adding a comment here with your test description so that future readers can get a quick high-level orientation to the code. I like the description in the commit message, but unfortunately recovering that commit message later is sort of archaeological in nature, as opposed to it just being there in the source file.",
      "revId": "aae268ae869170d2f3c777af5cfaaf3f1c645870",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2923357_b4f010da",
        "filename": "cert/test/AndroidCertTest/app/src/main/cpp/operations/vulkan/VulkanVaryingsTestOperation.cpp",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1599245
      },
      "writtenOn": "2020-02-14T19:38:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5ee86083_d5b4d4e7",
      "revId": "aae268ae869170d2f3c777af5cfaaf3f1c645870",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9f23ad8_1318ff4c",
        "filename": "cert/test/AndroidCertTest/app/src/main/cpp/operations/vulkan/VulkanVaryingsTestOperation.cpp",
        "patchSetId": 1
      },
      "lineNbr": 154,
      "author": {
        "id": 1557643
      },
      "writtenOn": "2020-02-12T23:21:21Z",
      "side": 1,
      "message": "Still, this whole thing is pretty elegant. Nice work.",
      "revId": "aae268ae869170d2f3c777af5cfaaf3f1c645870",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a10aec6e_ca2a5e42",
        "filename": "cert/test/AndroidCertTest/app/src/main/cpp/operations/vulkan/VulkanVaryingsTestOperation.cpp",
        "patchSetId": 1
      },
      "lineNbr": 154,
      "author": {
        "id": 1599245
      },
      "writtenOn": "2020-02-13T22:40:38Z",
      "side": 1,
      "message": "I totally agree on both points! My only thought here is that, given the open source nature of this code, we might want to avoid leaving in comments like this. But it does seem like the sort of thing you could say as a CL comment (just as what I\u0027m typing right now is a CL comment).",
      "parentUuid": "b9f23ad8_1318ff4c",
      "revId": "aae268ae869170d2f3c777af5cfaaf3f1c645870",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f28dca5_eacafeb1",
        "filename": "cert/test/AndroidCertTest/app/src/main/cpp/operations/vulkan/VulkanVaryingsTestOperation.cpp",
        "patchSetId": 1
      },
      "lineNbr": 154,
      "author": {
        "id": 1599245
      },
      "writtenOn": "2020-02-14T19:38:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a10aec6e_ca2a5e42",
      "revId": "aae268ae869170d2f3c777af5cfaaf3f1c645870",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "284dd0e8_6c398369",
        "filename": "cert/test/AndroidCertTest/app/src/main/cpp/operations/vulkan/VulkanVaryingsTestOperation.cpp",
        "patchSetId": 1
      },
      "lineNbr": 159,
      "author": {
        "id": 1599245
      },
      "writtenOn": "2020-02-13T22:40:38Z",
      "side": 1,
      "message": "This pattern reminds me a lot of the \"ash\" Rust library ðŸ˜Š",
      "revId": "aae268ae869170d2f3c777af5cfaaf3f1c645870",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb06ed39_33b4613a",
        "filename": "cert/test/AndroidCertTest/app/src/main/cpp/operations/vulkan/VulkanVaryingsTestOperation.cpp",
        "patchSetId": 1
      },
      "lineNbr": 159,
      "author": {
        "id": 1599245
      },
      "writtenOn": "2020-02-14T19:38:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "284dd0e8_6c398369",
      "revId": "aae268ae869170d2f3c777af5cfaaf3f1c645870",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "be2006b4_8662728a",
        "filename": "cert/test/AndroidCertTest/app/src/main/cpp/operations/vulkan/VulkanVaryingsTestOperation.cpp",
        "patchSetId": 1
      },
      "lineNbr": 215,
      "author": {
        "id": 1599245
      },
      "writtenOn": "2020-02-13T22:40:38Z",
      "side": 1,
      "message": "What are your thoughts (in general) on retaining shader modules given that they can be immediately destroyed once the pipeline is created? I can kind of see an argument going both ways.",
      "revId": "aae268ae869170d2f3c777af5cfaaf3f1c645870",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a9e4c7aa_57a4021d",
        "filename": "cert/test/AndroidCertTest/app/src/main/cpp/operations/vulkan/VulkanVaryingsTestOperation.cpp",
        "patchSetId": 1
      },
      "lineNbr": 215,
      "author": {
        "id": 1599245
      },
      "writtenOn": "2020-02-14T19:38:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "be2006b4_8662728a",
      "revId": "aae268ae869170d2f3c777af5cfaaf3f1c645870",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}