{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ff8ef53f_5faeda48",
        "filename": "include/memory_advice/memory_advice.h",
        "patchSetId": 1
      },
      "lineNbr": 91,
      "author": {
        "id": 1498014
      },
      "writtenOn": "2020-11-25T17:16:56Z",
      "side": 1,
      "message": "This typedef is also part of the public interface and so should be \"namespaced\": \n    MemoryAdvice_CallbackFunction\n\nto avoid conflicts with other libraries.",
      "range": {
        "startLine": 91,
        "startChar": 15,
        "endLine": 91,
        "endChar": 31
      },
      "revId": "35354ce6fa77388b5682e6da0c32c10e5931703d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "311175dc_b47ef68c",
        "filename": "include/memory_advice/memory_advice.h",
        "patchSetId": 1
      },
      "lineNbr": 91,
      "author": {
        "id": 1568678
      },
      "writtenOn": "2020-11-26T12:52:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ff8ef53f_5faeda48",
      "range": {
        "startLine": 91,
        "startChar": 15,
        "endLine": 91,
        "endChar": 31
      },
      "revId": "35354ce6fa77388b5682e6da0c32c10e5931703d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e3a34a0_6e22b8ad",
        "filename": "include/memory_advice/memory_advice.h",
        "patchSetId": 1
      },
      "lineNbr": 148,
      "author": {
        "id": 1498014
      },
      "writtenOn": "2020-11-25T17:16:56Z",
      "side": 1,
      "message": "Let\u0027s put a complete Doxygen doc comment for all \"public\" function in this file, as it\u0027s the public interface and the most important part to be documented.\nAdd @brief for all functions so that it shows nicely in the generated doc.\nAlso add \"@param parameterName Quick explanation\" and a \"@return Quick description\" so that they are shown in the docs.",
      "revId": "35354ce6fa77388b5682e6da0c32c10e5931703d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dc1968cc_d4792f0d",
        "filename": "include/memory_advice/memory_advice.h",
        "patchSetId": 1
      },
      "lineNbr": 148,
      "author": {
        "id": 1568678
      },
      "writtenOn": "2020-11-26T12:52:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6e3a34a0_6e22b8ad",
      "revId": "35354ce6fa77388b5682e6da0c32c10e5931703d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32e2912c_c723e9df",
        "filename": "src/memory_advice/core/memory_advice_impl.cpp",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1498014
      },
      "writtenOn": "2020-11-25T17:16:56Z",
      "side": 1,
      "message": "Because it can be called in StateWatcher thread, I think it should be made thread safe.\nThis function itself seems to be, but it\u0027s calling GetAdvice, which is calling GenerateVariableMetrics, which is calling GenerateMetricsFromFields. Seems that in all the cases it\u0027s just reading data or processing it locally, but I would still make things safer with a few mutex/locks around data that could be modified at the same time it\u0027s read?",
      "revId": "35354ce6fa77388b5682e6da0c32c10e5931703d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fe9aa4a7_01229fc5",
        "filename": "src/memory_advice/core/memory_advice_impl.cpp",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1568678
      },
      "writtenOn": "2020-11-26T12:52:04Z",
      "side": 1,
      "message": "I put a mutex for the getAdvice function, which should be enough as that\u0027s the main function where data is read and processed.",
      "parentUuid": "32e2912c_c723e9df",
      "revId": "35354ce6fa77388b5682e6da0c32c10e5931703d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c3e629e_cac8cd08",
        "filename": "src/memory_advice/core/state_watcher.h",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1498014
      },
      "writtenOn": "2020-11-25T17:16:56Z",
      "side": 1,
      "message": "I usually prefer to make the destructor virtual as not doing so would prevent child classes to be properly destructed (if one day someone uses this class polymorphically). See http://www.gotw.ca/publications/mill18.htm, search for \"A base class destructor should be either public and virtual, or protected and nonvirtual.\"",
      "revId": "35354ce6fa77388b5682e6da0c32c10e5931703d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0f410e6c_97228fcd",
        "filename": "src/memory_advice/core/state_watcher.h",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1568678
      },
      "writtenOn": "2020-11-26T12:52:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7c3e629e_cac8cd08",
      "revId": "35354ce6fa77388b5682e6da0c32c10e5931703d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}