{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d553b36e_e484a0c6",
        "filename": "src/common/StringShim.h",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1498014
      },
      "writtenOn": "2020-12-01T11:32:22Z",
      "side": 1,
      "message": "ubernitpicking: `std::size_t* pos \u003d nullptr`?",
      "revId": "0fa1b137f10adad59e285841cc2871d90ff36d17",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "338f922a_9fd5c9e7",
        "filename": "src/common/StringShim.h",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1373878
      },
      "writtenOn": "2020-12-01T14:11:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d553b36e_e484a0c6",
      "revId": "0fa1b137f10adad59e285841cc2871d90ff36d17",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70498c92_c3f0657a",
        "filename": "src/tuningfork/core/tuningfork_impl.cpp",
        "patchSetId": 1
      },
      "lineNbr": 675,
      "author": {
        "id": 1498014
      },
      "writtenOn": "2020-12-01T11:32:22Z",
      "side": 1,
      "message": "Can you explain how lifecycle_stop_event_sent_ can be true at the moment thee OnStart event is triggered? I think I\u0027m missing something about when this lifecycle event is sent.",
      "revId": "0fa1b137f10adad59e285841cc2871d90ff36d17",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32fb2faa_59bb2832",
        "filename": "src/tuningfork/core/tuningfork_impl.cpp",
        "patchSetId": 1
      },
      "lineNbr": 675,
      "author": {
        "id": 1498014
      },
      "writtenOn": "2020-12-01T11:37:52Z",
      "side": 1,
      "message": "Understood now that it\u0027s when app is foregrounded. Make sense then. Can you confirm this will work when app is backgrounded and foregrounded multiple times?",
      "parentUuid": "70498c92_c3f0657a",
      "revId": "0fa1b137f10adad59e285841cc2871d90ff36d17",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b4376c8c_d9a0582f",
        "filename": "src/tuningfork/core/tuningfork_impl.cpp",
        "patchSetId": 1
      },
      "lineNbr": 675,
      "author": {
        "id": 1373878
      },
      "writtenOn": "2020-12-01T14:11:35Z",
      "side": 1,
      "message": "Yes, I\u0027ve updated the test to do it multiple times.",
      "parentUuid": "32fb2faa_59bb2832",
      "revId": "0fa1b137f10adad59e285841cc2871d90ff36d17",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c44a25a_8e04c287",
        "filename": "src/tuningfork/core/uploadthread.cpp",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1498014
      },
      "writtenOn": "2020-12-01T11:32:22Z",
      "side": 1,
      "message": "nit: `! .empty()` (a bit more idiomatic as vector is used as a replacement for optional)",
      "revId": "0fa1b137f10adad59e285841cc2871d90ff36d17",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "91c4e978_df4d4374",
        "filename": "src/tuningfork/core/uploadthread.cpp",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1373878
      },
      "writtenOn": "2020-12-01T14:11:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0c44a25a_8e04c287",
      "revId": "0fa1b137f10adad59e285841cc2871d90ff36d17",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "403d8a7c_2f42cc3b",
        "filename": "src/tuningfork/core/uploadthread.cpp",
        "patchSetId": 1
      },
      "lineNbr": 157,
      "author": {
        "id": 1498014
      },
      "writtenOn": "2020-12-01T11:32:22Z",
      "side": 1,
      "message": "nit: empty()",
      "revId": "0fa1b137f10adad59e285841cc2871d90ff36d17",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "72c47c3f_c40daa95",
        "filename": "src/tuningfork/core/uploadthread.cpp",
        "patchSetId": 1
      },
      "lineNbr": 157,
      "author": {
        "id": 1373878
      },
      "writtenOn": "2020-12-01T14:11:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "403d8a7c_2f42cc3b",
      "revId": "0fa1b137f10adad59e285841cc2871d90ff36d17",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2840aab_4c5c306e",
        "filename": "src/tuningfork/core/uploadthread.cpp",
        "patchSetId": 1
      },
      "lineNbr": 159,
      "author": {
        "id": 1498014
      },
      "writtenOn": "2020-12-01T11:32:22Z",
      "side": 1,
      "message": "not a specialist in thread safety, but should you lock the mutex before comparing the emptiness of the lifecycle event? To avoid two threads checking that it\u0027s both empty, and then both adding one after the other the event in the vector?\n\nNot sure if it\u0027s likely though to have concurrent calls to SendLifecycleEvent, so might not be worth the hassle.",
      "revId": "0fa1b137f10adad59e285841cc2871d90ff36d17",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "16e7e267_15b49f74",
        "filename": "src/tuningfork/core/uploadthread.cpp",
        "patchSetId": 1
      },
      "lineNbr": 159,
      "author": {
        "id": 1373878
      },
      "writtenOn": "2020-12-01T14:11:35Z",
      "side": 1,
      "message": "It\u0027s extremely, extremely unlikely and if we did get more than 1 event pushed they would still both be handled in DoWork. They might just have to wait 1s before being uploaded.",
      "parentUuid": "c2840aab_4c5c306e",
      "revId": "0fa1b137f10adad59e285841cc2871d90ff36d17",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "81c8b8c0_67f9bdfe",
        "filename": "src/tuningfork/core/uploadthread.h",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 1498014
      },
      "writtenOn": "2020-12-01T11:32:22Z",
      "side": 1,
      "message": "You could almost use a typedef \"OptionalAsVector\" or something like this to make it this pattern of using vector as an optional easily searchable in the codebase.",
      "revId": "0fa1b137f10adad59e285841cc2871d90ff36d17",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14dec1cc_654b6a96",
        "filename": "src/tuningfork/http_backend/json_serializer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 117,
      "author": {
        "id": 1498014
      },
      "writtenOn": "2020-12-01T11:32:22Z",
      "side": 1,
      "message": "This isn\u0027t making any difference right?",
      "revId": "0fa1b137f10adad59e285841cc2871d90ff36d17",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "99e67911_1996b260",
        "filename": "src/tuningfork/http_backend/json_serializer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 117,
      "author": {
        "id": 1373878
      },
      "writtenOn": "2020-12-01T14:11:35Z",
      "side": 1,
      "message": "Yep, removed.",
      "parentUuid": "14dec1cc_654b6a96",
      "revId": "0fa1b137f10adad59e285841cc2871d90ff36d17",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd7de354_aae7054f",
        "filename": "src/tuningfork/http_backend/json_serializer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 394,
      "author": {
        "id": 1498014
      },
      "writtenOn": "2020-12-01T11:32:22Z",
      "side": 1,
      "message": "Any chance this (and the end of the function) could be factored in a PrepareTelemetrySerialization or something like that?",
      "revId": "0fa1b137f10adad59e285841cc2871d90ff36d17",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f82afb4d_1fd39f11",
        "filename": "src/tuningfork/http_backend/json_serializer.cpp",
        "patchSetId": 1
      },
      "lineNbr": 394,
      "author": {
        "id": 1373878
      },
      "writtenOn": "2020-12-01T14:11:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dd7de354_aae7054f",
      "revId": "0fa1b137f10adad59e285841cc2871d90ff36d17",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c5b4d2c_f2923514",
        "filename": "test/tuningfork/tuningfork_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 300,
      "author": {
        "id": 1498014
      },
      "writtenOn": "2020-12-01T11:32:22Z",
      "side": 1,
      "message": "Should this be static?",
      "revId": "0fa1b137f10adad59e285841cc2871d90ff36d17",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c32e7059_fbf3ec65",
        "filename": "test/tuningfork/tuningfork_test.cpp",
        "patchSetId": 1
      },
      "lineNbr": 300,
      "author": {
        "id": 1373878
      },
      "writtenOn": "2020-12-01T14:11:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4c5b4d2c_f2923514",
      "revId": "0fa1b137f10adad59e285841cc2871d90ff36d17",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}