{
  "comments": [
    {
      "key": {
        "uuid": "0bf1cbc9_797cb54c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1336478
      },
      "writtenOn": "2020-03-18T00:27:00Z",
      "side": 1,
      "message": "try removing this line to avoid Mr. Lint\u0027s complain?",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 1,
        "endChar": 87
      },
      "revId": "243e66827ab681ad8abca3335c55d50b4207b0f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4ccff97_d6e43ed0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1572660
      },
      "writtenOn": "2020-03-18T00:36:53Z",
      "side": 1,
      "message": "I don\u0027t know that this is the actual line that\u0027s triggering Lint, since this is not part of my commit (it\u0027s generated by Gerrit, w/ the working tree and my commit message, I think). I\u0027m assuming that it\u0027s just attaching the error message here.",
      "parentUuid": "0bf1cbc9_797cb54c",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 1,
        "endChar": 87
      },
      "revId": "243e66827ab681ad8abca3335c55d50b4207b0f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48f69ebc_1336905a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1336478
      },
      "writtenOn": "2020-03-18T00:49:15Z",
      "side": 1,
      "message": "hah yeah I just found out this. maybe the some keywords in the commit message (e.g. thrid party, libraries) triggered Lint? We can add license team to take a look afterwards",
      "parentUuid": "e4ccff97_d6e43ed0",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 1,
        "endChar": 87
      },
      "revId": "243e66827ab681ad8abca3335c55d50b4207b0f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b8e1c9e_d89078b6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1572660
      },
      "writtenOn": "2020-03-18T17:00:59Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "48f69ebc_1336905a",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 1,
        "endChar": 87
      },
      "revId": "243e66827ab681ad8abca3335c55d50b4207b0f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f366e66_5eaee4c6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1359095
      },
      "writtenOn": "2020-03-19T19:23:48Z",
      "side": 1,
      "message": "The UI for commit messages is broken. It\u0027s really complaining about line 14, where there is a false positive.\n\nSince it is a false positive and there are no other findings, any 2 Googlers can approve merge by voting +2 on the Open-Souce-Licensing label.",
      "parentUuid": "8b8e1c9e_d89078b6",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 1,
        "endChar": 87
      },
      "revId": "243e66827ab681ad8abca3335c55d50b4207b0f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8311c934_60020579",
        "filename": "bender/bender-base/app/src/main/jni/texture.cc",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 1566081
      },
      "writtenOn": "2020-03-18T03:33:57Z",
      "side": 1,
      "message": "Probably worth explicitly calling out the numeric conversions here, especially as you\u0027re converting unsigned -\u003e signed -\u003e double -\u003e unsigned here. \n\n     mip_levels_ \u003d static_cast\u003cuint32_t\u003e( std::floor( std::log2( static_cast\u003cfloat\u003e( std::max( tex_width_, tex_height_ ) ) ) ) ) + 1U;\n\nOccasionally signed vs. unsigned usage can lead to undefined behavior, and it\u0027s horrible to try to figure out what happened. Usually you should at least get a warning though.\n\nNOTE: This next part is just to show you a trick.\n\nIt may also be possible to replace the log2/floor calls with a call to __builtin_clz() - which should be supported on all Android devices (requires ARM7 instructions) and on Intel/AMD\n\ne.g.\n\nmip_levels_ \u003d ( sizeof(tex_width_)* 8 ) - __builtin_clz( std::max( tex_width_, tex_height_ ) );",
      "range": {
        "startLine": 32,
        "startChar": 1,
        "endLine": 32,
        "endChar": 77
      },
      "revId": "243e66827ab681ad8abca3335c55d50b4207b0f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "033116a2_0e919cc7",
        "filename": "bender/bender-base/app/src/main/jni/texture.cc",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 1336478
      },
      "writtenOn": "2020-03-18T00:27:00Z",
      "side": 1,
      "message": "if this is only of single use, can we just put `texture_file_name.find(\".astc\") !\u003d -1` here?",
      "range": {
        "startLine": 46,
        "startChar": 6,
        "endLine": 46,
        "endChar": 13
      },
      "revId": "243e66827ab681ad8abca3335c55d50b4207b0f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5bf4cd5_563e4d19",
        "filename": "bender/bender-base/app/src/main/jni/texture.cc",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 1572660
      },
      "writtenOn": "2020-03-18T00:36:53Z",
      "side": 1,
      "message": "Will do",
      "parentUuid": "033116a2_0e919cc7",
      "range": {
        "startLine": 46,
        "startChar": 6,
        "endLine": 46,
        "endChar": 13
      },
      "revId": "243e66827ab681ad8abca3335c55d50b4207b0f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3008e43b_9909704a",
        "filename": "bender/bender-base/app/src/main/jni/texture.cc",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 1336478
      },
      "writtenOn": "2020-03-18T00:49:15Z",
      "side": 1,
      "message": "and one more concern when checking this way: what if an uncompressed texture file wrongly named with *.astc :p",
      "parentUuid": "d5bf4cd5_563e4d19",
      "range": {
        "startLine": 46,
        "startChar": 6,
        "endLine": 46,
        "endChar": 13
      },
      "revId": "243e66827ab681ad8abca3335c55d50b4207b0f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bef4e05f_cbac299d",
        "filename": "bender/bender-base/app/src/main/jni/texture.cc",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 1572660
      },
      "writtenOn": "2020-03-18T17:00:59Z",
      "side": 1,
      "message": "That\u0027s fair; right now the ASTC loading checks the magic value in the ASTC header, and loads default texture if it\u0027s invalid (which would signify an invalid file wrongly named with *.astc).",
      "parentUuid": "3008e43b_9909704a",
      "range": {
        "startLine": 46,
        "startChar": 6,
        "endLine": 46,
        "endChar": 13
      },
      "revId": "243e66827ab681ad8abca3335c55d50b4207b0f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d2ce040_28c79bc9",
        "filename": "bender/bender-base/app/src/main/jni/texture.cc",
        "patchSetId": 2
      },
      "lineNbr": 85,
      "author": {
        "id": 1578313
      },
      "writtenOn": "2020-03-18T13:32:23Z",
      "side": 1,
      "message": "Could we have LoadFileData consolidate all the calls to loading data (LoadASTCFileData, LoadDefaultTexture, and perhaps a refactor of the work done in LoadFileData out to another function?)",
      "revId": "243e66827ab681ad8abca3335c55d50b4207b0f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3521b13_bc5e2f27",
        "filename": "bender/bender-base/app/src/main/jni/texture.cc",
        "patchSetId": 2
      },
      "lineNbr": 85,
      "author": {
        "id": 1572660
      },
      "writtenOn": "2020-03-18T17:00:59Z",
      "side": 1,
      "message": "Ooh do you mean like have all the textures call LoadFileData, and deal with splitting into Default, png, or ASTC within this function? That makes sense to me, will do.",
      "parentUuid": "8d2ce040_28c79bc9",
      "revId": "243e66827ab681ad8abca3335c55d50b4207b0f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0b1af63_95f3c5ab",
        "filename": "bender/bender-base/app/src/main/jni/texture.cc",
        "patchSetId": 2
      },
      "lineNbr": 177,
      "author": {
        "id": 1566081
      },
      "writtenOn": "2020-03-18T03:33:57Z",
      "side": 1,
      "message": "You mentioned earlier today that ASTC inverted the y-order of lines in the texture vs what you were expecting (which was fixed-up in the shader). Would it make more sense to flip the lines here (on-read, or after the image is in memory), or even better during encode?",
      "range": {
        "startLine": 174,
        "startChar": 0,
        "endLine": 177,
        "endChar": 21
      },
      "revId": "243e66827ab681ad8abca3335c55d50b4207b0f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f2c6831_b88281d4",
        "filename": "bender/bender-base/app/src/main/jni/texture.cc",
        "patchSetId": 2
      },
      "lineNbr": 177,
      "author": {
        "id": 1572660
      },
      "writtenOn": "2020-03-18T17:00:59Z",
      "side": 1,
      "message": "See comment in shell script :)",
      "parentUuid": "b0b1af63_95f3c5ab",
      "range": {
        "startLine": 174,
        "startChar": 0,
        "endLine": 177,
        "endChar": 21
      },
      "revId": "243e66827ab681ad8abca3335c55d50b4207b0f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7816fb5_b9a50248",
        "filename": "bender/bender-base/app/src/main/jni/texture.cc",
        "patchSetId": 2
      },
      "lineNbr": 215,
      "author": {
        "id": 1336478
      },
      "writtenOn": "2020-03-18T00:27:00Z",
      "side": 1,
      "message": "maybe img_size would be more accurate?",
      "range": {
        "startLine": 215,
        "startChar": 14,
        "endLine": 215,
        "endChar": 23
      },
      "revId": "243e66827ab681ad8abca3335c55d50b4207b0f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25889245_02ea1503",
        "filename": "bender/bender-base/app/src/main/jni/texture.cc",
        "patchSetId": 2
      },
      "lineNbr": 215,
      "author": {
        "id": 1572660
      },
      "writtenOn": "2020-03-18T00:36:53Z",
      "side": 1,
      "message": "I actually think that bytes is more accurate in this case (since .size is meant to be bytes of the buffer). I named it this way because I figured size might be ambiguous in terms of referring to image dimensions, which is not the same for the ASTC compressed textures.",
      "parentUuid": "c7816fb5_b9a50248",
      "range": {
        "startLine": 215,
        "startChar": 14,
        "endLine": 215,
        "endChar": 23
      },
      "revId": "243e66827ab681ad8abca3335c55d50b4207b0f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "612665f9_29dae178",
        "filename": "bender/bender-base/app/src/main/jni/texture.cc",
        "patchSetId": 2
      },
      "lineNbr": 215,
      "author": {
        "id": 1336478
      },
      "writtenOn": "2020-03-18T00:49:15Z",
      "side": 1,
      "message": "makes sense when putting astc format in account",
      "parentUuid": "25889245_02ea1503",
      "range": {
        "startLine": 215,
        "startChar": 14,
        "endLine": 215,
        "endChar": 23
      },
      "revId": "243e66827ab681ad8abca3335c55d50b4207b0f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3878e316_7afdde7c",
        "filename": "bender/bender-base/app/src/main/jni/texture.h",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1566081
      },
      "writtenOn": "2020-03-18T03:33:57Z",
      "side": 1,
      "message": "Wondering if these are the source of your lint message - astc_header (and the encoder) appears in 3rd party libs elsewhere in the google source tree - e.g. https://cs.corp.google.com/piper///depot/google3/third_party/fplbase/src/texture_headers.h?q\u003dASTCHeader\u0026dr\u003dCSs\n\nAlso, it would be a good to isolate all of the ASTC stuff to its own .h/.cpp - this will eventually be in Vulkan/OpenGL ES standard, and I\u0027d assume that they\u0027d include the data structure/cookie value there.",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 29,
        "endChar": 21
      },
      "revId": "243e66827ab681ad8abca3335c55d50b4207b0f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "644ba7ec_5731226c",
        "filename": "bender/bender-base/app/src/main/jni/texture.h",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1572660
      },
      "writtenOn": "2020-03-18T17:00:59Z",
      "side": 1,
      "message": "I don\u0027t think that this is the source of the lint error b/c Lint didn\u0027t comment on my first patchset. I have a theory that it\u0027s related to the commit description, will see if my theory is true in the next patchset 😊\n\nAlso will split out into separate astc files.",
      "parentUuid": "3878e316_7afdde7c",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 29,
        "endChar": 21
      },
      "revId": "243e66827ab681ad8abca3335c55d50b4207b0f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b84d60bf_73ae5626",
        "filename": "bender/bender-base/app/src/main/jni/vulkan_main.cc",
        "patchSetId": 2
      },
      "lineNbr": 80,
      "author": {
        "id": 1566081
      },
      "writtenOn": "2020-03-18T03:33:57Z",
      "side": 1,
      "message": "Is this only for this revision? If so, you might want to add a comment like this:\n\n//#HACK: Hardcoding material file for ATSC compression for this release. Remove later.",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 80,
        "endChar": 92
      },
      "revId": "243e66827ab681ad8abca3335c55d50b4207b0f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5620273_2c755b29",
        "filename": "bender/bender-base/app/src/main/jni/vulkan_main.cc",
        "patchSetId": 2
      },
      "lineNbr": 80,
      "author": {
        "id": 1578313
      },
      "writtenOn": "2020-03-18T13:32:23Z",
      "side": 1,
      "message": "This should get fixed with the Vertex Format Compression code :P",
      "parentUuid": "b84d60bf_73ae5626",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 80,
        "endChar": 92
      },
      "revId": "243e66827ab681ad8abca3335c55d50b4207b0f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86fb88ac_05659f1e",
        "filename": "bender/bender-base/app/src/main/jni/vulkan_main.cc",
        "patchSetId": 2
      },
      "lineNbr": 80,
      "author": {
        "id": 1572660
      },
      "writtenOn": "2020-03-18T17:00:59Z",
      "side": 1,
      "message": "Will figure out what to do with this with Omar",
      "parentUuid": "e5620273_2c755b29",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 80,
        "endChar": 92
      },
      "revId": "243e66827ab681ad8abca3335c55d50b4207b0f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2653c064_671f393a",
        "filename": "bender/bender-base/convert_astc.sh",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1566081
      },
      "writtenOn": "2020-03-18T03:33:57Z",
      "side": 1,
      "message": "Looks like this might be you fixing the flipping you mentioned this morning so you don\u0027t need to do it in the shader? (Or it\u0027s the source of the unexpected flipping?)",
      "range": {
        "startLine": 11,
        "startChar": 7,
        "endLine": 11,
        "endChar": 28
      },
      "revId": "243e66827ab681ad8abca3335c55d50b4207b0f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f284d41_7cb30b47",
        "filename": "bender/bender-base/convert_astc.sh",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1572660
      },
      "writtenOn": "2020-03-18T17:00:59Z",
      "side": 1,
      "message": "This is fixing the flipping; I\u0027m thinking about this in terms of Chef, where processing should be done ahead of use. I didn\u0027t want to change the shader, b/c it would require that I flip the textures for the png textures (which is what the ARM sample does), to enable both to be used in the same shader.",
      "parentUuid": "2653c064_671f393a",
      "range": {
        "startLine": 11,
        "startChar": 7,
        "endLine": 11,
        "endChar": 28
      },
      "revId": "243e66827ab681ad8abca3335c55d50b4207b0f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff7a6529_b646ab11",
        "filename": "bender/bender-base/convert_astc.sh",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1566081
      },
      "writtenOn": "2020-03-18T03:33:57Z",
      "side": 1,
      "message": "Will want to revisit this later - astcenc-nointrin implies that intrinsics are disabled for this build of the texture encoder. There\u0027s nearly zero build machines in existence which don\u0027t support up to at least AVX SSE2 on Windows (it\u0027s over a decade old - all 64-bit apps need to at least support SSE + SSE2). Most should even support SSE3 :)\n\nWe should default to a texture-encoder which is optimized.",
      "range": {
        "startLine": 12,
        "startChar": 10,
        "endLine": 12,
        "endChar": 26
      },
      "revId": "243e66827ab681ad8abca3335c55d50b4207b0f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "189c69ff_c2754715",
        "filename": "bender/bender-base/convert_astc.sh",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1572660
      },
      "writtenOn": "2020-03-18T17:00:59Z",
      "side": 1,
      "message": "Got it; astcenc provides options for sse2, sse4.2, and avx2, but I didn\u0027t know the distinctions so I just went with nointrin when testing.",
      "parentUuid": "ff7a6529_b646ab11",
      "range": {
        "startLine": 12,
        "startChar": 10,
        "endLine": 12,
        "endChar": 26
      },
      "revId": "243e66827ab681ad8abca3335c55d50b4207b0f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c87bd4cb_f799895d",
        "filename": "bender/bender-base/utils/src/obj_loader.cc",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 1566081
      },
      "writtenOn": "2020-03-18T03:33:57Z",
      "side": 1,
      "message": "A best-practice that I\u0027ve adopted over the years is that in my .cc/.cpp, for parameters on functions with default values, I\u0027ll add keep the default part in the .cc/.cpp but commented out. e.g.:\n\nvoid LoadOBJ(AAssetManager *mgr,\n             const std::string \u0026objFileName,\n             std::unordered_map\u003cstd::string, MTL\u003e \u0026mtllib,\n             std::vector\u003cOBJ\u003e \u0026modelData,\n             const std::string *mtlOverrideFileName /* \u003d nullptr */) {\n\n... that way people reading the .cpp can see what\u0027s a default, as there\u0027s usually additional inferred semantics there. Your call tho, especially as this requires that you block-comment out code using //\u0027s instead of /* ... */",
      "range": {
        "startLine": 76,
        "startChar": 13,
        "endLine": 76,
        "endChar": 54
      },
      "revId": "243e66827ab681ad8abca3335c55d50b4207b0f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c25b1ad5_9ef1febf",
        "filename": "bender/bender-base/utils/src/obj_loader.cc",
        "patchSetId": 2
      },
      "lineNbr": 151,
      "author": {
        "id": 1566081
      },
      "writtenOn": "2020-03-18T03:33:57Z",
      "side": 1,
      "message": "It\u0027s a good idea to hoist out magic numbers and comment them (I realize this was from an earlier checkin - probably Omar\u0027s?).\n\nBased on usage, if they only crop up once, you can put them by the usage. Otherwise, hoist to the top of the .cpp or even the .h\n\nExample:\n      AddVertex(vertex2, modelData.back(), position, normal, texCoord, tangent, bitangent);\n      AddVertex(vertex1, modelData.back(), position, normal, texCoord, tangent, bitangent);\n\n      if (modelData.back().vert_to_index.size() \u003e 65500){\n\nBecomes:\n\n      AddVertex(vertex2, modelData.back(), position, normal, texCoord, tangent, bitangent);\n      AddVertex(vertex1, modelData.back(), position, normal, texCoord, tangent, bitangent);\n      \n      // Some GPUs only allow uint16_t index values - this prevents us from overflowing\n      constexpr size_t MaxAllowedIndexCountPerBuffer \u003d 65500U;\n\n      if (modelData.back().vert_to_index.size() \u003e MaxAllowedIndexCountPerBuffer ){",
      "range": {
        "startLine": 151,
        "startChar": 50,
        "endLine": 151,
        "endChar": 55
      },
      "revId": "243e66827ab681ad8abca3335c55d50b4207b0f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2548458f_89d67f78",
        "filename": "bender/bender-base/utils/src/obj_loader.cc",
        "patchSetId": 2
      },
      "lineNbr": 151,
      "author": {
        "id": 1578313
      },
      "writtenOn": "2020-03-18T13:32:23Z",
      "side": 1,
      "message": "Yea this one\u0027s mine for sure, forgot to make it a macro or a constant",
      "parentUuid": "c25b1ad5_9ef1febf",
      "range": {
        "startLine": 151,
        "startChar": 50,
        "endLine": 151,
        "endChar": 55
      },
      "revId": "243e66827ab681ad8abca3335c55d50b4207b0f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8cbd0fe_e0b844cb",
        "filename": "bender/bender-base/utils/src/obj_loader.cc",
        "patchSetId": 2
      },
      "lineNbr": 151,
      "author": {
        "id": 1572660
      },
      "writtenOn": "2020-03-18T17:00:59Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "2548458f_89d67f78",
      "range": {
        "startLine": 151,
        "startChar": 50,
        "endLine": 151,
        "endChar": 55
      },
      "revId": "243e66827ab681ad8abca3335c55d50b4207b0f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cb492bf_79de5516",
        "filename": "bender/bender-base/utils/src/obj_loader.h",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 1566081
      },
      "writtenOn": "2020-03-18T03:33:57Z",
      "side": 1,
      "message": "If this is temporary while you\u0027re working on the obj loader, you might want to call this out in a comment - overriding filenames feels like an edge case to me.",
      "range": {
        "startLine": 81,
        "startChar": 4,
        "endLine": 81,
        "endChar": 63
      },
      "revId": "243e66827ab681ad8abca3335c55d50b4207b0f3",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}