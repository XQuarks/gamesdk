{
  "comments": [
    {
      "key": {
        "uuid": "606f2ecc_ede3fecf",
        "filename": "include/swappy/swappy_extra.h",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1269249
      },
      "writtenOn": "2018-12-05T13:52:52Z",
      "side": 1,
      "message": "#pragma once",
      "revId": "8c7be82b4f45f3a71cb8c93d22fb1bde7f1789ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ace5258b_f77e1ed3",
        "filename": "include/swappy/swappy_extra.h",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1373878
      },
      "writtenOn": "2018-12-05T15:23:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "606f2ecc_ede3fecf",
      "revId": "8c7be82b4f45f3a71cb8c93d22fb1bde7f1789ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c5a712a_db83acf9",
        "filename": "include/swappy/swappy_extra.h",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1269249
      },
      "writtenOn": "2018-12-05T13:52:52Z",
      "side": 1,
      "message": "I think that you should remove \u0027public:\u0027 from here. This is in an extern \"C\" which should compile in a C compiler (I think public: will not compile in C mode?). Also public is redundant in this context because struct defaults to public.",
      "revId": "8c7be82b4f45f3a71cb8c93d22fb1bde7f1789ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69ae9ebe_ce41e879",
        "filename": "include/swappy/swappy_extra.h",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1373878
      },
      "writtenOn": "2018-12-05T15:23:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5c5a712a_db83acf9",
      "revId": "8c7be82b4f45f3a71cb8c93d22fb1bde7f1789ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5be8ebef_1a7cda1a",
        "filename": "src/swappy/src/main/cpp/Swappy.cpp",
        "patchSetId": 1
      },
      "lineNbr": 149,
      "author": {
        "id": 1269249
      },
      "writtenOn": "2018-12-05T13:52:52Z",
      "side": 1,
      "message": "There\u0027s a lot of boiler plate of this kind. Is there some way to neaten it up? (i.e. have a function which takes a member function pointer and then wraps up getting the swappy instance, checking for an injected tracer and passing the userdata?",
      "revId": "8c7be82b4f45f3a71cb8c93d22fb1bde7f1789ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d880630_2ccf439a",
        "filename": "src/swappy/src/main/cpp/Swappy.cpp",
        "patchSetId": 1
      },
      "lineNbr": 149,
      "author": {
        "id": 1373878
      },
      "writtenOn": "2018-12-05T15:23:03Z",
      "side": 1,
      "message": "The neatest I could do it was with a macro. LMK if this is acceptable",
      "parentUuid": "5be8ebef_1a7cda1a",
      "revId": "8c7be82b4f45f3a71cb8c93d22fb1bde7f1789ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80625c54_c6e5cf1e",
        "filename": "src/swappy/src/main/cpp/Swappy.cpp",
        "patchSetId": 1
      },
      "lineNbr": 149,
      "author": {
        "id": 1376737
      },
      "writtenOn": "2018-12-05T16:12:05Z",
      "side": 1,
      "message": "Something like:\nif (swappy-\u003eCanDoXXX()) {\n\nbool Swappy::CanDoXX() const {\n  return mInjectedTracer \u0026\u0026 swappy-\u003emInjectedTracer-\u003epreSwapBuffers;\n}",
      "parentUuid": "6d880630_2ccf439a",
      "revId": "8c7be82b4f45f3a71cb8c93d22fb1bde7f1789ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eae058d6_e6264cee",
        "filename": "src/swappy/src/main/cpp/Swappy.cpp",
        "patchSetId": 1
      },
      "lineNbr": 149,
      "author": {
        "id": 1373878
      },
      "writtenOn": "2018-12-05T16:23:06Z",
      "side": 1,
      "message": "Did you look at the macro solution in patchset 3?",
      "parentUuid": "80625c54_c6e5cf1e",
      "revId": "8c7be82b4f45f3a71cb8c93d22fb1bde7f1789ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cff3f9d9_d9cd0940",
        "filename": "src/swappy/src/main/cpp/Swappy.cpp",
        "patchSetId": 1
      },
      "lineNbr": 155,
      "author": {
        "id": 1376737
      },
      "writtenOn": "2018-12-05T16:12:05Z",
      "side": 1,
      "message": "i\u0027d extract this code in a new method Swappy::postSwapBuffers().\n\nvoid Swappy::PostSwapBuffers() {\n  if(mInjectedTracer \u0026\u0026 mInjectedTracer-\u003epostSwapBuffers)\n      mInjectedTracer-\u003epostSwapBuffers(mInjectedTracer-\u003euserData);\n}\n\nhttps://en.wikipedia.org/wiki/Law_of_Demeter",
      "revId": "8c7be82b4f45f3a71cb8c93d22fb1bde7f1789ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87564bee_8a62d469",
        "filename": "src/swappy/src/main/cpp/Swappy.cpp",
        "patchSetId": 1
      },
      "lineNbr": 168,
      "author": {
        "id": 1269249
      },
      "writtenOn": "2018-12-05T13:52:52Z",
      "side": 1,
      "message": "I\u0027m not sure that\u0027s the correct message, we are in setTracer not swap?",
      "revId": "8c7be82b4f45f3a71cb8c93d22fb1bde7f1789ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e1b5ce5c_c29339f2",
        "filename": "src/swappy/src/main/cpp/Swappy.cpp",
        "patchSetId": 1
      },
      "lineNbr": 168,
      "author": {
        "id": 1373878
      },
      "writtenOn": "2018-12-05T15:23:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "87564bee_8a62d469",
      "revId": "8c7be82b4f45f3a71cb8c93d22fb1bde7f1789ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e60b79b_be315021",
        "filename": "src/swappy/src/main/cpp/Swappy.cpp",
        "patchSetId": 1
      },
      "lineNbr": 243,
      "author": {
        "id": 1376737
      },
      "writtenOn": "2018-12-05T16:12:05Z",
      "side": 1,
      "message": "extract to Swappy::startFrame()",
      "revId": "8c7be82b4f45f3a71cb8c93d22fb1bde7f1789ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b65c89a5_f8f5948e",
        "filename": "src/swappy/src/main/cpp/Swappy.cpp",
        "patchSetId": 1
      },
      "lineNbr": 272,
      "author": {
        "id": 1376737
      },
      "writtenOn": "2018-12-05T16:12:05Z",
      "side": 1,
      "message": "Swappy::preWait();",
      "revId": "8c7be82b4f45f3a71cb8c93d22fb1bde7f1789ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d07797c_7beba963",
        "filename": "src/swappy/src/main/cpp/Swappy.cpp",
        "patchSetId": 1
      },
      "lineNbr": 281,
      "author": {
        "id": 1376737
      },
      "writtenOn": "2018-12-05T16:12:05Z",
      "side": 1,
      "message": "Swappy::postWait();",
      "revId": "8c7be82b4f45f3a71cb8c93d22fb1bde7f1789ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24b7586b_a897f522",
        "filename": "src/swappy/src/main/cpp/Swappy.h",
        "patchSetId": 1
      },
      "lineNbr": 119,
      "author": {
        "id": 1376737
      },
      "writtenOn": "2018-12-05T19:14:07Z",
      "side": 1,
      "message": "mInjectedTracer should be a struct, not a pointer. Since setTracer() is expected to be called very rarely, we can take the hit of copying a bunch of pointers to avoid holding on potential dangling pointers.",
      "revId": "8c7be82b4f45f3a71cb8c93d22fb1bde7f1789ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}