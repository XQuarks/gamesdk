#!/bin/zsh

#
# Copyright 2020 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Texture Compressor. For details and usage, run
# $ . ./textcomp --help

# Echoes all arguments, preceding by a timestamp.
log() {
    echo "[$(date +"%T")]" "$@"
}

# Explains inputs and outputs.
show_usage() {
    echo
    echo Usage:
    echo "    $ . $THIS <action> [<input dir] [<output dir] [<bpp>]"
    echo
    echo "Where:"
    echo "    <action> is astc, etc2 or basis (*)."
    echo "    <input dir> is the path whose JPG, PNG files will be compressed."
    echo "          If ommited, current directory is assumed."
    echo "    <output dir> is the path where results are left."
    echo "          If ommited, <input dir> is assumed."
    echo "    <bpp> (astc only) target bits-per-pixel. Possible values are 2, 4"
    echo "          (default) or 8."
    echo
    echo "(*) astc and etc2 require command line Mali Texture Compression Tool in"
    echo "    the PATH. astc also requires ImageMagic's convert in the PATH."
    echo "    basis requires command line Binomial Basis Universal GPU Texture"
    echo "    Codec in the PATH."
    echo
    echo "Example:"
    echo "---------"
    echo
    echo "Running"
    echo "    $ . $THIS astc ./MyTextures ./MyCompressedTextures 2"
    echo
    echo "on a directory MyTextures that contains texture1.jpg texture1.png and"
    echo "texture2.jpg, it produces a directory MyCompressedTextures containing"
    echo
    echo "- MyCompressedTextures"
    echo "    +- texture1"
    echo "    |    +- texture1.jpg"
    echo "    |    +- texture1_RGB_2bpp.astc"
    echo "    |    +- texture1_RGB_2bpp.astc.gzip"
    echo "    |    +- texture1_RGB_2bpp.astc.lz4"
    echo "    |    +- texture1.png"
    echo "    |    +- texture1_RGBA_2bpp.astc"
    echo "    |    +- texture1_RGBA_2bpp.astc.gzip"
    echo "    |    +- texture1_RGBA_2bpp.astc.lz4"
    echo "    |"
    echo "    +- texture2"
    echo "         +- texture2.jpg"
    echo "         +- texture2_RGB_2bpp.astc"
    echo "         +- texture2_RGB_2bpp.astc.gzip"
    echo "         +- texture2_RGB_2bpp.astc.lz4"
    echo
}

# Elaborates on what this tool does.
show_help() {
    echo "Texture compressor."
    echo "Compresses textures in different formats, to compare performance of"
    echo "different approaches (optimize for disk footprint/network transmission,"
    echo "optimize for rendering, and all the associated transcoding operations"
    echo "between storage and GPU)."
    show_usage
}

# Verifies that the input argument is in the path.
check_in_path() {
    _WHICH=$(command -v "${1}")
    if [[ ${_WHICH} == "$1 not found" ]]; then
        _WHICH=""
    fi
    echo ${_WHICH}
}

# Removes the final slash of a directory, if present.
normalize_dir() {
    _DIR=$1
    _DIR_LAST_CHAR="${_DIR: -1}"
    if [[ $_DIR_LAST_CHAR == '/' ]]; then
        _DIR=$(echo "${_DIR}" | cut -b -$((${#_DIR}-1)))
    fi
    echo "${_DIR}"
}

# Restricts input bpp to 2, 4 or 8. If none, assumes 4.
validate_bpp() {
    if [ -z "$1" ]; then _BPP=4; else _BPP=$1; fi
    case $_BPP in
        2|4|8)
            echo "${_BPP}"
            ;;
        *)
            echo
            ;;
    esac
}

# Creates directory only if it doesn't exist.
make_dir_safe() {
    if [ ! -d "$1" ]; then
        mkdir -p "$1"
    fi
}

# Given a file path, removes the directory and leaves the file name.
get_file_name() {
    echo "${1}" | grep -oG '/[^/]*$' | cut -c2-
}

# Given a file path, returns its extension.
get_file_extension() {
    echo "${1}" | grep -oG '\.[^.]*$' | cut -c2-
}

# Given a file path, removes its directory and extension.
get_file_stem() {
    _FILE_NAME=$(get_file_name "${1}")
    _FILE_EXTENSION=$(get_file_extension "${_FILE_NAME}")
    echo "${_FILE_NAME}" | cut -b -$((${#_FILE_NAME}-${#_FILE_EXTENSION}-1))
}

# Given a file path, returns its directory.
get_file_dir() {
    _FILE_PATH=$1
    _FILE_NAME=$(get_file_name "${_FILE_PATH}")
    echo "${_FILE_PATH}" | cut -b -$((${#_FILE_PATH}-${#_FILE_NAME}-1))
}

# Deflates the file received as argument into a directory based on the
# input directory.
deflate() {
    _INPUT_FILE=$1
    _DEFLATED_FILE=${_INPUT_FILE}.gzip
    # The reason why .gzip instead of simply .gz is because the Android SDK build treats .gz files
    # in a special way. Long story short, it throws "Duplicate resources" because it treats the
    # deflated version of the original file and the original file like if both were named like the
    # original file.
    # The workaround is to use another extension, like .gzip for example.
    ${DEFLATOR} -9c "${_INPUT_FILE}" > "${_DEFLATED_FILE}"
    log "Deflated to ${_DEFLATED_FILE}"
}

# Compresses the file received as argument into a directory based on the
# input directory.
compress_lz4() {
    if [ -n "${LZ4}" ]; then
        _INPUT_FILE=$1
        _LZ4_FILE=${_INPUT_FILE}.lz4
        ${LZ4} -9c "${_INPUT_FILE}" > "${_LZ4_FILE}" 2>/dev/null
        log "lz4'ed to ${_LZ4_FILE}"
    fi
}

# Compresses the file referred by envvar INPUT_FILE as astc.
compress_astc() {
    if [ -n "${CONVERT}" ]; then
        FLIPPED_FILE="${INPUT_STEM}-flipped.${EXTENSION}"
        $CONVERT -flip "${INPUT_FILE}" "${FLIPPED_FILE}"
    else
        FLIPPED_FILE=${INPUT_FILE}
    fi

    OUTPUT_FILE=${FAMILY_DIR}/${INPUT_STEM}_${CHANNELS}_${BPP}bpp.astc
    $COMPRESSOR -c "${FLIPPED_FILE}" "${OUTPUT_FILE}" "${BPP}.0" -thorough > /dev/null

    if [[ ${INPUT_FILE} != "${FLIPPED_FILE}" ]]; then
      rm "${FLIPPED_FILE}"
    fi
}

# Compresses the file referred by envvar INPUT_FILE as etc2.
compress_etc2() {
    OUTPUT_FILE=${FAMILY_DIR}/${INPUT_STEM}_${CHANNELS}.pkm

    $COMPRESSOR "${INPUT_FILE}" "${FAMILY_DIR}" -s fast -c etc2 -f "${CHANNELS:u}" > /dev/null
    mv "${FAMILY_DIR}/${INPUT_STEM}.pkm" "${OUTPUT_FILE}"
}

# Compresses the file referred by envvar INPUT_FILE as basis.
compress_basis() {
    OUTPUT_FILE=${FAMILY_DIR}/${INPUT_STEM}_${CHANNELS}.basis

    if [[ $EXTENSION == "png" ]]; then
        $COMPRESSOR -uastc -uastc_level 3 -file "${INPUT_FILE}" -output_file "${OUTPUT_FILE}" > /dev/null
    else
        $COMPRESSOR -file "${INPUT_FILE}" -output_file "${OUTPUT_FILE}" > /dev/null
    fi
}

#==============================================================================

# Main starts here.
THIS=$0
ACTION=$1

case $ACTION in
    astc)
        CONVERT=$(check_in_path convert)
        if [ -z "${CONVERT}" ]; then
            echo "WARNING: astc compression needs input textures to be converted using ImageMagic's convert tool."
            echo "         As it's not in the PATH, we'll skip conversion but .astc outputs will look vertically flipped."
        fi
        COMPRESSOR=$(check_in_path astcenc)
        COMPRESS_FN=compress_astc
        ;;
    etc2)
        COMPRESSOR=$(check_in_path etcpack)
        COMPRESS_FN=compress_etc2
        ;;
    basis)
        COMPRESSOR=$(check_in_path basisu)
        COMPRESS_FN=compress_basis
        ;;
    -h|--help)
        show_help
        return 0
        ;;
    *)
        if [ -z "$ACTION" ]; then
            echo Missing action.
        else
            echo "Invalid action: ${ACTION}."
        fi
        show_usage
        return 1
        ;;
esac

if [ -z "$COMPRESSOR" ]; then
    echo "ERROR: Couldn't find texture compressor for ${ACTION} in PATH. Is it installed?"
    show_usage
    return 1
fi

if [ -z "$2" ]; then INPUT_DIR=$(pwd); else INPUT_DIR=$2; fi
INPUT_DIR=$(normalize_dir "${INPUT_DIR}")

if [ -z "$3" ]; then OUTPUT_DIR=$INPUT_DIR; else OUTPUT_DIR=$3; fi
OUTPUT_DIR=$(normalize_dir "${OUTPUT_DIR}")

BPP=$(validate_bpp "${4}")
if [[ $ACTION == 'astc' ]] && [ -z "$BPP" ]; then
    echo "ERROR: Invalid bits-per-second: ${4}"
    show_usage
    return 1
fi

DEFLATOR=$(check_in_path gzip)
if [ -z "$DEFLATOR" ]; then
    echo "WARNING: gzip not found in PATH. Skipping deflator."
fi

LZ4=$(check_in_path lz4)
if [ -z "$LZ4" ]; then
    echo "WARNING: lz4 not found in PATH. Skipping lz4 extra compression."
fi

while read -rd '' INPUT_FILE; do
    unset OUTPUT_FILE
    EXTENSION=$(get_file_extension "${INPUT_FILE}")
    if [[ $EXTENSION == "png" || $EXTENSION == "jpg" ]]; then
        INPUT_STEM=$(get_file_stem "${INPUT_FILE}")

        FAMILY_DIR=${OUTPUT_DIR}/${INPUT_STEM}
        make_dir_safe "${FAMILY_DIR}"

        if [[ "$EXTENSION" == "png" ]]; then CHANNELS="RGBA"; else CHANNELS="RGB"; fi

        log "Starting ${ACTION} ${INPUT_FILE}..."
        cp -n "${INPUT_FILE}" "${FAMILY_DIR}"

        ${COMPRESS_FN}
        if [ -z "$OUTPUT_FILE" ]; then
            log Skipped.
        else
            log "${ACTION}'ed at ${OUTPUT_FILE}"
            deflate "${OUTPUT_FILE}"
            compress_lz4 "${OUTPUT_FILE}"
        fi
    fi
done < <(find "$INPUT_DIR" -maxdepth 1 -type f -name "*.*" -print0)
