{
  "comments": [
    {
      "key": {
        "uuid": "4da7c4cd_b1485896",
        "filename": "cert/test/AndroidCertTest/app/src/main/assets/Shaders/DependentTextureReadGLES3Operation/indirect_texture_read.fsh",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1557643
      },
      "writtenOn": "2020-04-20T16:25:32Z",
      "side": 1,
      "message": "I\u0027m not certain this bounds check is necessary, since texture wrap/clamp behavior is specified in GL on the texture object itself and is implemented in hardware in the sampler unit; all it does here is add code. That being said it doesn\u0027t hurt anything to be explicit.",
      "revId": "837611da7b27fc435df3306463bb6f07e793a3b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f70e5c48_90e58210",
        "filename": "cert/test/AndroidCertTest/app/src/main/assets/Shaders/DependentTextureReadGLES3Operation/indirect_texture_read.fsh",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1590267
      },
      "writtenOn": "2020-04-20T16:46:40Z",
      "side": 1,
      "message": "Thanks, Shamyl. I tell you why I think I must re-clamp by illustrating a worst case scenario here.\n\nLet\u0027s imagine that the fragment shader gets called with a vTexCoord \u003d (0.5, 0.5). uMultiplier (set by the operation as a random coefficient between 0 and 1) comes being 1.0, let\u0027s assume.\n\nuIndirections is also 1, meaning that we\u0027ll iterate once through this for loop.\n\nSo far, so good.\n\nOnce inside the for loop, outColor already have, let\u0027s imagine (1, 1, 1, 1) -that is to say, a fully visible white color).\nAnd lastTextCoord got already initialized as incoming vTexCoord; that is to say (0.5, 0.5).\n\nNow, inside the loop, we calculate the deltaXY to apply to the indirect texture coordinate (line 39):\ndeltaXY \u003d (1, 1) * 1.0 \u003d (1, 1).\n\nIn line 41, we shift lastTextCoord by deltaXY:\nlastTextCoord \u003d (0.5, 0.5) + (1, 1) \u003d (1.5, 1.5)\n\nWhat I\u0027m doing in lines 44 to 50 is a sort of \"pacman effect\". If you trespass the right border, I\u0027ll make you re-enter from the left by the extra distance. Same if you \"disappear\" through the bottom (you\u0027ll \"re-appear\" from the top.\nNamely, if lastTextCoord was (1.3, 1.7) after shifting deltaXY, it will become (0.3, 0.7). Back inside the square defined by diagonal (0, 0) - (1, 1).\n\nHope it makes sense.",
      "parentUuid": "4da7c4cd_b1485896",
      "revId": "837611da7b27fc435df3306463bb6f07e793a3b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b1044f7_2d43823d",
        "filename": "cert/test/AndroidCertTest/app/src/main/assets/Shaders/DependentTextureReadGLES3Operation/indirect_texture_read.fsh",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1599245
      },
      "writtenOn": "2020-04-21T00:26:18Z",
      "side": 1,
      "message": "I was thinking the same thing, Shamyl. I talked it over with Diego and we concluded that the texture parameter GL_REPEAT should do the trick.",
      "parentUuid": "f70e5c48_90e58210",
      "revId": "837611da7b27fc435df3306463bb6f07e793a3b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "401d1891_66cbcd72",
        "filename": "cert/test/AndroidCertTest/app/src/main/assets/Shaders/DependentTextureReadGLES3Operation/indirect_texture_read.fsh",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1590267
      },
      "writtenOn": "2020-04-21T00:45:11Z",
      "side": 1,
      "message": "Marking this as unresolved until I apply that GL_REPEAT trick, remove lines 44 to 50.",
      "parentUuid": "8b1044f7_2d43823d",
      "revId": "837611da7b27fc435df3306463bb6f07e793a3b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b9f01a8_fb4edeed",
        "filename": "cert/test/AndroidCertTest/app/src/main/cpp/operations/gl/DependentTextureReadGLES3Operation.cpp",
        "patchSetId": 1
      },
      "lineNbr": 328,
      "author": {
        "id": 1599245
      },
      "writtenOn": "2020-04-21T00:26:18Z",
      "side": 1,
      "message": "What is this function doing? Iterating over the vertices looks like a no-op to me, am I missing something? And is it even necessary to be calling glMapBufferRange instead of glBufferData?",
      "revId": "837611da7b27fc435df3306463bb6f07e793a3b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1b9a652_ec02074f",
        "filename": "cert/test/AndroidCertTest/app/src/main/cpp/operations/gl/DependentTextureReadGLES3Operation.cpp",
        "patchSetId": 1
      },
      "lineNbr": 328,
      "author": {
        "id": 1590267
      },
      "writtenOn": "2020-04-21T00:45:11Z",
      "side": 1,
      "message": "Great question, Michael!\n\nShort story long: my first attempt to implement this operation didn\u0027t have that, but when running, a big black square was shown (no output).\n\nSo I departed from another, existing operation (that I knew how it worked), and through successive minor tweaks I converted it into this one.\n\nGuess what I\u0027ve found: if I remove this Step() function, I get the blackout back. I couldn\u0027t explain what causes it. I wish I know as I also feel like this is a hack.",
      "parentUuid": "8b9f01a8_fb4edeed",
      "revId": "837611da7b27fc435df3306463bb6f07e793a3b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b4a08cd_2a0ed5c5",
        "filename": "cert/test/AndroidCertTest/app/src/main/cpp/operations/gl/DependentTextureReadGLES3Operation.cpp",
        "patchSetId": 1
      },
      "lineNbr": 351,
      "author": {
        "id": 1599245
      },
      "writtenOn": "2020-04-21T00:26:18Z",
      "side": 1,
      "message": "I\u0027m curious why you went the route of procedurally setting the vertex, texcoord, and index data, rather than just making an explicit array of vertices like `GLfloat texcoords[] \u003d {0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0};`. I suppose it doesn\u0027t matter too much, but it might be easier to read/debug that way.",
      "revId": "837611da7b27fc435df3306463bb6f07e793a3b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ef02830_1c626dba",
        "filename": "cert/test/AndroidCertTest/app/src/main/cpp/operations/gl/DependentTextureReadGLES3Operation.cpp",
        "patchSetId": 1
      },
      "lineNbr": 351,
      "author": {
        "id": 1590267
      },
      "writtenOn": "2020-04-21T00:45:11Z",
      "side": 1,
      "message": "Hahahaha, true!!\n\nWell, I\u0027ll try doing what you say, definitely.\n\nShort story long: in my first attempt, rather than indexed vertices, I just tried to draw a quad. Not quite two triangles but a single quad. Didn\u0027t work, probably because I\u0027m two knew to know how glDrawArray for a quad.\n\nThis... sh*t... is a tweaked version of the operation I started from on my second attempt. That operation split the entire texture in an NxN grid of two triangles each grid. I tweaked that down until getting one single grid of two triangles. And it worked, happy me!!\n\nBut certainly I could go, at least, one step further and just initialize here with the result rather than calculating it. I missed that detail, admittedly.",
      "parentUuid": "3b4a08cd_2a0ed5c5",
      "revId": "837611da7b27fc435df3306463bb6f07e793a3b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f60a65f5_597ca143",
        "filename": "cert/test/reporting/lib/graphers/dependent_read_suite_handler.py",
        "patchSetId": 1
      },
      "lineNbr": 2,
      "author": {
        "id": 1599245
      },
      "writtenOn": "2020-04-21T00:26:18Z",
      "side": 1,
      "message": "This can be 2020 now ðŸ˜Š",
      "revId": "837611da7b27fc435df3306463bb6f07e793a3b8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}